@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {
valid    : Boolean
messages : String[]
+ validateEmailFormat(email: String): ValidationResult  //UC1 + action: Validate email format
+ validatePasswordStrength(password: String): ValidationResult  //UC1 + action: Check password complexity
}
class Coordinates {
latitude  : Float
longitude : Float
}
class Address {
street           : String
city             : String
zipCode          : String
country          : String
position         : Coordinates
validationStatus : VerificationStatus
}
class TimeRange {
start : LocalTime
end   : LocalTime
}
class OpeningHours {
dayOfWeek : DayOfWeek
timeRange : TimeRange
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {
id               : UUID
registrationDate : Date
accountStatus    : AccountStatus
+ createUnverifiedAccount(): void  //UC1 + action: Initialize account with unverified status
+ recordLogin(): void  //UC2 + action: Capture login timestamp
+ deactivate(reason: String): void  //UC15 + action: Mark account as deactivated
}
class UserProfile {
name                  : String
email                 : String
phoneNumber           : String
address               : Address
role                  : UserRole
lastUpdatedDate       : Date
accountLockedDate     : Date
emailVerifiedDate     : Date
emailValidationStatus : VerificationStatus
deactivationReason    : String
+ verifyEmail(): void  //UC1 + action: Mark email as verified
+ updateProfileDetails(details: Map): ValidationResult  //UC4 + action: Modify user information
}
class UserCredentials {
encryptedPassword   : String
lastPasswordReset   : Date
failedLoginAttempts : Integer
lastLoginDate       : Date
passwordResetToken  : String
tokenExpirationDate : Date
email               : String
+ generatePasswordResetToken(): void  //UC3 + action: Create time-limited reset token
+ validateCredentials(password: String): Boolean  //UC2 + action: Authenticate login attempt
+ resetPassword(newPassword: String): void  //UC3 + action: Update encrypted password
}
class ServiceProvider {
providerId  : UUID
companyName : String
profile     : UserProfile
+ acceptCollectionRequest(request: CollectionRequest): void  //UC8 + action: Take ownership of request
+ scheduleTransport(request: TransportRequest): void  //UC9 + action: Plan logistics for transport
}
class "RoleManager <<service>>" as RoleManager {
+ validateRoleTransition(oldRole: UserRole, newRole: UserRole): ValidationResult  //UC21 + action: Check permissible role changes
+ updateUserRole(user: UserProfile, newRole: UserRole): void  //UC21 + action: Modify user privileges
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {
id                : UUID
requestType       : RequestType
status            : RequestStatus
createdDate       : Date
scheduledTime     : TimeRange
proposedTimeSlots : TimeRange[]
requester         : UserProfile
handledBy         : ServiceProvider
trackedJourney    : WasteJourney
requestedDate     : Date
quantity          : Integer
categories        : ProductCategory[]
cancelledBy       : UserProfile
cancelledDate     : Date
+ validateRequestConsistency(): ValidationResult  //UC6 + action: Check request completeness
+ cancelRequest(): void  //UC12 + action: Mark request as cancelled
}
class CollectionRequest extends ServiceRequest {
vehicleType : VehicleType
location    : Address
+ validateVehicleCapacity(): ValidationResult  //UC8 + action: Check provider's vehicle availability
}
class TransportRequest extends ServiceRequest {
routePlan : RoutePlan
+ generateRoutePlan(): void  //UC9 + action: Create optimized transport path
}
class ServiceRequestDetails {
payload : Map
}
ServiceRequest ..> ServiceRequestDetails : uses >
class RoutePlan {
waypoints : Coordinates[]
+ optimizeRoute(): void  //UC9 + action: Calculate most efficient path
}
ServiceProvider "1" --> "*" ServiceRequest : handles >
TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {
journeyId       : UUID
trackingCode    : String
stages          : Stage[]
status          : TrackingStatus
currentLocation : Address
+ updateJourneyStage(newStage: Stage): void  //UC10 + action: Record waste processing phase
+ validateTrackingCode(code: String): ValidationResult  //UC10 + action: Verify code authenticity
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {
productId           : UUID
name                : String
description         : String
category            : ProductCategory
inventory           : Integer
listingStatus       : ListingStatus
listedDate          : Date
lastUpdatedDate     : Date
sustainabilityScore : Float
+ createListing(details: Map): void  //UC5 + action: Initialize new product entry
+ updateListingDetails(details: Map): ValidationResult  //UC13 + action: Modify existing product data
}
class SearchFilter {
categories  : ProductCategory[]
location    : Address
maxDistance : Float
keywords    : String
+ applyFilters(): Product[]  //UC14 + action: Return matching products
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {
pointId        : UUID
name           : String
type           : PointType
position       : Coordinates
operatingHours : OpeningHours[]
+ validateOperatingHours(): ValidationResult  //UC20 + action: Check time consistency
+ updateLocationDetails(details: Map): void  //UC20 + action: Modify facility information
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {
templateId : String
channel    : NotificationChannel
content    : String
}
class NotificationService {
+ sendVerificationEmail(user: UserProfile): void  //UC1 + action: Trigger email confirmation
+ notifyPasswordReset(user: UserProfile): void  //UC3 + action: Alert about password change
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml