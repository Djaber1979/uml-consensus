@startuml
left to right direction
' CORE VALUE OBJECTS
package "Core Value Objects" {
  enum VerificationStatus {
    VERIFIED
    UNVERIFIED
  }
  enum VehicleType {
    TRUCK
    VAN
    CARGO_BIKE
    BICYCLE
    MOTORCYCLE
    COMPACTOR
    ELECTRIC_VAN
    CARGO_VAN
  }
  enum DayOfWeek {
    MON
    TUE
    WED
    THU
    FRI
    SAT
    SUN
  }
  class ValidationResult {
    valid    : Boolean
    messages : String[]
  }
  class Coordinates {
    latitude  : Float
    longitude : Float
  }
  class Address {
    street           : String
    city             : String
    zipCode          : String
    country          : String
    position         : Coordinates
    validationStatus : VerificationStatus
    +validateAddressConsistency() //Uc_04 //action: Validate address fields alignment
    +markAsVerified() //Uc_01 //action: Set address verification status to VERIFIED
  }
  class TimeRange {
    start : LocalTime
    end   : LocalTime
    +validateTimeOrder() //Uc_19 //action: Ensure start time precedes end time
  }
  class OpeningHours {
    dayOfWeek : DayOfWeek
    timeRange : TimeRange
    +validateOperatingHours() //Uc_20 //action: Check valid day and time range combination
  }
  Address *-- Coordinates
  OpeningHours -- TimeRange
}

' USER MANAGEMENT
package "User Management" {
  enum UserRole {
    USER
    SERVICE_PROVIDER
    PLATFORM_MANAGER
  }
  enum AccountStatus {
    ACTIVE
    DEACTIVATED
    SUSPENDED
    LOCKED
  }
  class UserAccount {
    id               : UUID
    registrationDate : Date
    accountStatus    : AccountStatus
    +deactivateAccount(reason: String) //Uc_15 //action: Transition account to DEACTIVATED state
    +lockAccount() //Uc_02 //action: Transition account to LOCKED state after failed attempts
    +recordLoginTimestamp() //Uc_02 //action: Update last login date
  }
  class UserProfile {
    name                  : String
    email                 : String
    phoneNumber           : String
    address               : Address
    role                  : UserRole
    lastUpdatedDate       : Date
    accountLockedDate     : Date
    emailVerifiedDate     : Date
    emailValidationStatus : VerificationStatus
    deactivationReason    : String
    +validateProfileData() //Uc_04 //action: Check name/phone/email format consistency
    +updateProfileDetails(newData: Map<String, Object>) //Uc_04 //action: Modify profile fields
    +verifyEmail() //Uc_01 //action: Set emailValidationStatus to VERIFIED
  }
  class UserCredentials {
    encryptedPassword   : String
    lastPasswordReset   : Date
    failedLoginAttempts : Integer
    lastLoginDate       : Date
    passwordResetToken  : String
    tokenExpirationDate : Date
    email               : String
    +validateCredentialsFormat() //Uc_01 //action: Check email format and password strength
    +updatePassword(newPassword: String) //Uc_03 //action: Replace encrypted password
    +incrementFailedAttempts() //Uc_02 //action: Increase failed login attempt counter
    +resetFailedAttempts() //Uc_02 //action: Reset failed login counter after success
  }
  class ServiceProvider {
    providerId  : UUID
    companyName : String
    profile     : UserProfile
    +updateServiceProviderProfile(changes: Map<String, Object>) //Uc_19 //action: Modify service provider details
  }
  class "RoleManager <<service>>" as RoleManager {
    +assignRole(user: UserAccount, newRole: UserRole) //Uc_21 //action: Update user role after validation
    +validateRoleTransition(currentRole: UserRole, newRole: UserRole) //Uc_21 //action: Check role change permissions
  }
  UserAccount ..> ValidationResult
  UserProfile ..> ValidationResult
  UserCredentials ..> ValidationResult
  RoleManager ..> ValidationResult
  UserAccount "1" --> "1" UserProfile : has >
  UserAccount "1" --> "1" UserCredentials : authenticates >
  UserAccount --> RoleManager : uses >
  UserAccount "1" -- "0..1" ServiceProvider : may act as >
}

' SERVICE MANAGEMENT
package "Service Management" {
  enum RequestType {
    COLLECTION
    TRANSPORT
  }
  enum RequestStatus {
    PENDING
    SCHEDULED
    COMPLETED
    CANCELLED
  }
  abstract class ServiceRequest {
    id                : UUID
    requestType       : RequestType
    status            : RequestStatus
    createdDate       : Date
    scheduledTime     : TimeRange
    proposedTimeSlots : TimeRange[]
    requester         : UserProfile
    handledBy         : ServiceProvider
    trackedJourney    : WasteJourney
    requestedDate     : Date
    quantity          : Integer
    categories        : ProductCategory[]
    cancelledBy       : UserProfile
    cancelledDate     : Date
    +submitRequest() //Uc_06 //action: Initialize request with PENDING status
    +cancelRequest(cancelledBy: UserProfile) //Uc_12 //action: Transition to CANCELLED state
    +acceptRequest(provider: ServiceProvider) //Uc_08 //action: Assign handler and transition to SCHEDULED
    +completeRequest() //Uc_08 //action: Transition to COMPLETED state
  }
  class CollectionRequest extends ServiceRequest {
    vehicleType : VehicleType
    location    : Address
    +validateVehicleSuitability() //Uc_08 //action: Check vehicle type matches request requirements
  }
  class TransportRequest extends ServiceRequest {
    routePlan : RoutePlan
    +validateRouteFeasibility() //Uc_09 //action: Check route plan logistics viability
  }
  class RoutePlan {
    waypoints : Coordinates[]
    +validateWaypointSequence() //Uc_09 //action: Ensure logical geographic progression
  }
  ServiceProvider "1" --> "*" ServiceRequest : handles >
  TransportRequest -- RoutePlan
  ServiceRequest --> WasteJourney : tracked by >
  ServiceRequest --> UserProfile : requester >
  ServiceRequest --> ServiceProvider : handled by >
}

' WASTE TRACKING
package "Waste Tracking" {
  enum TrackingStatus {
    IN_PROGRESS
    COMPLETED
    CANCELLED
  }
  enum Stage {
    COLLECTED
    IN_TRANSIT
    PROCESSED
    RECYCLED
  }
  class WasteJourney {
    journeyId       : UUID
    trackingCode    : String
    stages          : Stage[]
    status          : TrackingStatus
    currentLocation : Address
    +updateTrackingStage(newStage: Stage) //Uc_10 //action: Add new stage to journey
    +getCurrentStatus() : TrackingStatus //Uc_10 //action: Return current tracking status
  }
  WasteJourney ..> ValidationResult
}

' PRODUCT MANAGEMENT
package "Product Management" {
  enum ProductCategory {
    RECYCLABLE_PLASTIC
    ELECTRONIC_WASTE
    ORGANIC_MATERIAL
    METAL
    GLASS
    TEXTILES
    PAPER
  }
  enum ListingStatus {
    DRAFT
    PENDING_APPROVAL
    PUBLISHED
    REJECTED
    ARCHIVED
  }
  class Product {
    productId           : UUID
    name                : String
    description         : String
    category            : ProductCategory
    inventory           : Integer
    listingStatus       : ListingStatus
    listedDate          : Date
    lastUpdatedDate     : Date
    sustainabilityScore : Float
    +validateProductDetails() //Uc_05 //action: Check required fields and category validity
    +publishListing() //Uc_05 //action: Transition listingStatus to PUBLISHED
    +updateListing(changes: Map<String, Object>) //Uc_13 //action: Modify product attributes
  }
  class SearchFilter {
    categories  : ProductCategory[]
    location    : Address
    maxDistance : Float
    keywords    : String
    +applyFilters(products: List<Product>) : List<Product> //Uc_14 //action: Filter products by criteria
  }
  Product ..> ValidationResult
  SearchFilter ..> ValidationResult
  Product "1" --> "*" CollectionPoint : available at >
  Product "1" --> "1" UserProfile      : requester >
  SearchFilter --> "*" Product            : filters >
}

' LOCATION MANAGEMENT
package "Location Management" {
  enum PointType {
    COLLECTION_CENTER
    RECYCLING_PLANT
    REUSE_STORE
  }
  class CollectionPoint {
    pointId        : UUID
    name           : String
    type           : PointType
    position       : Coordinates
    operatingHours : OpeningHours[]
    +validateLocationData() //Uc_20 //action: Check address and hours consistency
    +updateLocationDetails(changes: Map<String, Object>) //Uc_20 //action: Modify location attributes
  }
  CollectionPoint ..> ValidationResult
  CollectionPoint *-- Coordinates
  CollectionPoint *-- OpeningHours
  CollectionPoint -- Address : located at >
  ServiceProvider "1" --> "*" CollectionPoint : operates at >
}

' NOTIFICATION SERVICES
package "Notification Services" {
  enum NotificationType {
    REGISTRATION_SUCCESS
    NEW_REQUEST
    DISPATCH_ALERT
    PASSWORD_RESET
    PASSWORD_RESET_CONFIRM
    REQUEST_ACCEPTED
    ACCOUNT_DEACTIVATION
  }
  enum NotificationChannel{
    EMAIL
    SMS
    PUSH
  }
  class NotificationTemplate {
    templateId : String
    channel    : NotificationChannel
    content    : String
  }
  class NotificationService {
    +sendNotification(recipient: UserProfile, type: NotificationType) //Uc_01 //action: Trigger notification dispatch
  }
  NotificationService ..> NotificationTemplate
  NotificationService --> UserProfile     : notifies >
  NotificationService --> ServiceProvider : alerts >
}
@enduml