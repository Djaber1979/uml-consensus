@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {
valid    : Boolean
messages : String[]
}
class Coordinates {
latitude  : Float
longitude : Float
}
class Address {
street           : String
city             : String
zipCode          : String
country          : String
position         : Coordinates
validationStatus : VerificationStatus

+validate() : ValidationResult //UC1 //action: validate address format and completeness
+verifyCoordinates() : Boolean //UC20 //action: verify coordinates match address
}
class TimeRange {
start : LocalTime
end   : LocalTime

+overlaps(other : TimeRange) : Boolean //UC19 //action: check if timeranges overlap
+isValid() : Boolean //UC20 //action: validate start time is before end time
}
class OpeningHours {
dayOfWeek : DayOfWeek
timeRange : TimeRange
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {
id               : UUID
registrationDate : Date
accountStatus    : AccountStatus

+create(profile : UserProfile, credentials : UserCredentials) : UserAccount //UC1 //action: create new user account
+activate() : Boolean //UC1 //action: activate account after verification
+deactivate(reason : String) : Boolean //UC15 //action: soft deactivate account
+lock() : Boolean //UC2 //action: lock account after failed login attempts
+unlock() : Boolean //UC2 //action: unlock previously locked account
}
class UserProfile {
name                  : String
email                 : String
phoneNumber           : String
address               : Address
role                  : UserRole
lastUpdatedDate       : Date
accountLockedDate     : Date
emailVerifiedDate     : Date
emailValidationStatus : VerificationStatus
deactivationReason    : String

+validateProfileData() : ValidationResult //UC1 //action: validate profile information
+updateProfile(newData : UserProfile) : Boolean //UC4 //action: update profile information
+verifyEmail() : Boolean //UC1 //action: mark email as verified
+recordLoginTime() : void //UC2 //action: record successful login timestamp
+promoteTo(newRole : UserRole) : Boolean //UC21 //action: change user role
}
class UserCredentials {
encryptedPassword   : String
lastPasswordReset   : Date
failedLoginAttempts : Integer
lastLoginDate       : Date
passwordResetToken  : String
tokenExpirationDate : Date
email               : String

+validateCredentials(email : String, password : String) : Boolean //UC2 //action: validate login credentials
+incrementFailedAttempts() : Integer //UC2 //action: increment failed login counter
+resetFailedAttempts() : void //UC2 //action: reset failed login counter after successful login
+generateResetToken() : String //UC3 //action: generate password reset token
+validateResetToken(token : String) : Boolean //UC3 //action: validate token is valid and not expired
+updatePassword(newPassword : String) : Boolean //UC3 //action: update password with new value
}
class ServiceProvider {
providerId  : UUID
companyName : String
profile     : UserProfile

+updateProviderProfile(companyName : String) : Boolean //UC19 //action: update provider company details
+updateServiceAreas(areas : Address[]) : Boolean //UC19 //action: update service area locations
}
class "RoleManager <<service>>" as RoleManager {
+assignRole(userAccount : UserAccount, newRole : UserRole) : Boolean //UC21 //action: assign new role to user
+validateRoleTransition(currentRole : UserRole, newRole : UserRole) : ValidationResult //UC21 //action: validate role change is permitted
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {
id                : UUID
requestType       : RequestType
status            : RequestStatus
createdDate       : Date
scheduledTime     : TimeRange
proposedTimeSlots : TimeRange[]
requester         : UserProfile
handledBy         : ServiceProvider
trackedJourney    : WasteJourney
requestedDate     : Date
quantity          : Integer
categories        : ProductCategory[]
cancelledBy       : UserProfile
cancelledDate     : Date

+submit() : Boolean //UC6 //action: submit service request
+accept(provider : ServiceProvider) : Boolean //UC8, UC9 //action: accept request by provider
+schedule(timeSlot : TimeRange) : Boolean //UC8, UC9 //action: schedule request for specific time
+markCompleted() : Boolean //UC8, UC9 //action: mark request as completed
+cancel(cancelledBy : UserProfile) : Boolean //UC12 //action: cancel service request
+isEditable() : Boolean //UC12 //action: check if request can still be modified or cancelled
}
class CollectionRequest extends ServiceRequest {
vehicleType : VehicleType
location    : Address

+setCollectionLocation(location : Address) : Boolean //UC6 //action: set waste collection location
+assignVehicleType(type : VehicleType) : Boolean //UC8 //action: assign appropriate vehicle type
}
class TransportRequest extends ServiceRequest {
routePlan : RoutePlan

+createRoutePlan(waypoints : Coordinates[]) : RoutePlan //UC9 //action: create transport route plan
}
class ServiceRequestDetails {
payload : Map
}
ServiceRequest ..> ServiceRequestDetails : uses >
class RoutePlan {
waypoints : Coordinates[]

+addWaypoint(point : Coordinates) : Boolean //UC9 //action: add waypoint to route
+optimizeRoute() : Boolean //UC9 //action: optimize route for efficiency
}
ServiceProvider "1" --> "*" ServiceRequest : handles >
TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {
journeyId       : UUID
trackingCode    : String
stages          : Stage[]
status          : TrackingStatus
currentLocation : Address

+generateTrackingCode() : String //UC10 //action: generate unique tracking code
+addStage(stage : Stage) : Boolean //UC8, UC9 //action: add new stage to journey
+updateLocation(location : Address) : Boolean //UC8, UC9 //action: update current waste location
+completeJourney() : Boolean //UC8, UC9 //action: mark journey as completed
+getJourneyByCode(code : String) : WasteJourney //UC10 //action: retrieve journey using tracking code
+validateTrackingCode(code : String) : ValidationResult //UC10 //action: validate tracking code format and existence
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {
productId           : UUID
name                : String
description         : String
category            : ProductCategory
inventory           : Integer
listingStatus       : ListingStatus
listedDate          : Date
lastUpdatedDate     : Date
sustainabilityScore : Float

+createListing(name : String, category : ProductCategory, inventory : Integer) : Product //UC5 //action: create new product listing
+validateProduct() : ValidationResult //UC5, UC13 //action: validate product details completeness
+updateListing(updatedData : Product) : Boolean //UC13 //action: update existing product listing
+publishListing() : Boolean //UC5 //action: publish product listing
+archiveListing() : Boolean //UC13 //action: archive product listing
+calculateSustainabilityScore() : Float //UC5 //action: calculate product sustainability score
}
class SearchFilter {
categories  : ProductCategory[]
location    : Address
maxDistance : Float
keywords    : String

+applyFilters(products : Product[]) : Product[] //UC14 //action: filter products by criteria
+addCategory(category : ProductCategory) : Boolean //UC14 //action: add category to search filter
+setLocation(location : Address, maxDistance : Float) : Boolean //UC14 //action: set location search parameters
+addKeyword(keyword : String) : Boolean //UC14 //action: add keyword to search criteria
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {
pointId        : UUID
name           : String
type           : PointType
position       : Coordinates
operatingHours : OpeningHours[]

+addOperatingHours(hours : OpeningHours) : Boolean //UC20 //action: add operating hours to collection point
+validateUniqueness(location : Address) : ValidationResult //UC20 //action: validate location is not duplicate
+findNearby(location : Address, radius : Float) : CollectionPoint[] //UC22 //action: find collection points near location
+getByType(type : PointType) : CollectionPoint[] //UC22 //action: get collection points by type
+validateOperatingHours() : ValidationResult //UC20 //action: validate operating hours consistency
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {
templateId : String
channel    : NotificationChannel
content    : String

+getTemplate(type : NotificationType, channel : NotificationChannel) : NotificationTemplate //UC1, UC3, UC12, UC15 //action: get appropriate template
}
class NotificationService {
+sendVerificationEmail(email : String) : Boolean //UC1 //action: send account verification email
+sendPasswordResetEmail(email : String, token : String) : Boolean //UC3 //action: send password reset email
+notifyRequestAccepted(request : ServiceRequest) : Boolean //UC8, UC9 //action: notify user of accepted request
+alertServiceProvider(request : ServiceRequest) : Boolean //UC6 //action: alert provider of new request
+sendDeactivationConfirmation(email : String) : Boolean //UC15 //action: send account deactivation confirmation
+sendResetConfirmation(email : String) : Boolean //UC3 //action: send password reset confirmation
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml