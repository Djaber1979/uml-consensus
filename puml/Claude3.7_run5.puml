@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {
valid    : Boolean
messages : String[]
+isValid() : Boolean //UC1 //action: check if validation succeeded
}
class Coordinates {
latitude  : Float
longitude : Float
+calculateDistance(destination : Coordinates) : Float //UC14 //action: measure distance between coordinates
}
class Address {
street           : String
city             : String
zipCode          : String
country          : String
position         : Coordinates
validationStatus : VerificationStatus
+verifyAddress() : ValidationResult //UC1 //action: validate address format and existence
+markAsVerified() : void //UC1 //action: set address as verified
}
class TimeRange {
start : LocalTime
end   : LocalTime
+overlaps(other : TimeRange) : Boolean //UC8 //action: check if time ranges overlap
+isAvailable() : Boolean //UC19 //action: determine if timerange is available
}
class OpeningHours {
dayOfWeek : DayOfWeek
timeRange : TimeRange
+isOpenAt(day : DayOfWeek, time : LocalTime) : Boolean //UC20 //action: check if facility is open at specific time
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {
id               : UUID
registrationDate : Date
accountStatus    : AccountStatus
+register(profile : UserProfile, credentials : UserCredentials) : ValidationResult //UC1 //action: create user account
+updateProfile(profile : UserProfile) : ValidationResult //UC4 //action: update user profile
+login(email : String, password : String) : ValidationResult //UC2 //action: authenticate user
+lockAccount() : void //UC2 //action: lock account after failed attempts
+unlockAccount() : void //UC2 //action: unlock account
+recordLoginTime() : void //UC2 //action: record login timestamp
+resetPassword(token : String, newPassword : String) : ValidationResult //UC3 //action: update user password
+deactivateAccount(reason : String) : void //UC15 //action: soft-delete account
+logout() : void //UC16 //action: end user session
}
class UserProfile {
name                  : String
email                 : String
phoneNumber           : String
address               : Address
role                  : UserRole
lastUpdatedDate       : Date
accountLockedDate     : Date
emailVerifiedDate     : Date
emailValidationStatus : VerificationStatus
deactivationReason    : String
+validateProfileData() : ValidationResult //UC1 //action: validate user information
+updateContactInfo(email : String, phoneNumber : String) : ValidationResult //UC4 //action: update contact information
+updateAddress(address : Address) : ValidationResult //UC4 //action: update address information
+verifyEmail() : void //UC1 //action: mark email as verified
+recordProfileUpdate() : void //UC4 //action: update modification timestamp
}
class UserCredentials {
encryptedPassword   : String
lastPasswordReset   : Date
failedLoginAttempts : Integer
lastLoginDate       : Date
passwordResetToken  : String
tokenExpirationDate : Date
email               : String
+validateCredentials(email : String, password : String) : ValidationResult //UC2 //action: authenticate credentials
+encryptPassword(rawPassword : String) : String //UC1 //action: secure password
+validatePasswordStrength(password : String) : ValidationResult //UC1 //action: check password complexity
+incrementFailedAttempts() : Integer //UC2 //action: track failed login attempts
+resetFailedAttempts() : void //UC2 //action: clear failed attempts counter
+generateResetToken() : String //UC3 //action: create password reset token
+isResetTokenValid(token : String) : Boolean //UC3 //action: check if token is still valid
+changePassword(newPassword : String) : void //UC3 //action: update password
}
class ServiceProvider {
providerId  : UUID
companyName : String
profile     : UserProfile
+updateProviderProfile(name : String, serviceAreas : String[]) : ValidationResult //UC19 //action: update service provider details
+addVehicleType(type : VehicleType) : void //UC19 //action: add supported vehicle type
+updateAvailabilitySchedule(schedule : OpeningHours[]) : ValidationResult //UC19 //action: set provider availability
}
class "RoleManager <<service>>" as RoleManager {
+assignRole(userAccount : UserAccount, role : UserRole) : ValidationResult //UC21 //action: change user role
+promoteToServiceProvider(userAccount : UserAccount) : ServiceProvider //UC21 //action: create service provider from user
+validateRoleTransition(currentRole : UserRole, newRole : UserRole) : ValidationResult //UC21 //action: verify role change is allowed
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {
id                : UUID
requestType       : RequestType
status            : RequestStatus
createdDate       : Date
scheduledTime     : TimeRange
proposedTimeSlots : TimeRange[]
requester         : UserProfile
handledBy         : ServiceProvider
trackedJourney    : WasteJourney
requestedDate     : Date
quantity          : Integer
categories        : ProductCategory[]
cancelledBy       : UserProfile
cancelledDate     : Date
+submitRequest() : void //UC6 //action: create service request
+cancelRequest(canceller : UserProfile) : void //UC12 //action: cancel pending request
+assignServiceProvider(provider : ServiceProvider) : void //UC8 //action: set service provider
+scheduleService(timeSlot : TimeRange) : void //UC8 //action: set service time
+markAsCompleted() : void //UC8 //action: complete request
+proposeTimeSlots(slots : TimeRange[]) : void //UC8 //action: suggest alternative times
+getStatus() : RequestStatus //UC11 //action: retrieve current request status
+validateRequest() : ValidationResult //UC6 //action: validate request details
}
class CollectionRequest extends ServiceRequest {
vehicleType : VehicleType
location    : Address
+assignVehicle(type : VehicleType) : void //UC8 //action: assign appropriate vehicle
+updateCollectionLocation(location : Address) : void //UC6 //action: set pickup location
}
class TransportRequest extends ServiceRequest {
routePlan : RoutePlan
+createRoutePlan(waypoints : Coordinates[]) : void //UC9 //action: create transport route
+optimizeRoute() : void //UC9 //action: optimize route for efficiency
}
class ServiceRequestDetails {
payload : Map
+addRequestDetail(key : String, value : Object) : void //UC6 //action: add specific request detail
+getRequestDetail(key : String) : Object //UC11 //action: retrieve specific request detail
}
ServiceRequest ..> ServiceRequestDetails : uses >
class RoutePlan {
waypoints : Coordinates[]
+addWaypoint(point : Coordinates) : void //UC9 //action: add location to route
+calculateTotalDistance() : Float //UC9 //action: compute total route distance
+reorderWaypoints() : void //UC9 //action: optimize waypoint order
}
ServiceProvider "1" --> "*" ServiceRequest : handles >
TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {
journeyId       : UUID
trackingCode    : String
stages          : Stage[]
status          : TrackingStatus
currentLocation : Address
+generateTrackingCode() : String //UC8 //action: create unique tracking identifier
+addStage(stage : Stage) : void //UC8 //action: update waste journey progress
+getCurrentStage() : Stage //UC10 //action: get current processing stage
+updateLocation(location : Address) : void //UC10 //action: update waste current location
+completeJourney() : void //UC9 //action: mark journey as completed
+trackWasteJourney(trackingCode : String) : ValidationResult //UC10 //action: retrieve journey by tracking code
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {
productId           : UUID
name                : String
description         : String
category            : ProductCategory
inventory           : Integer
listingStatus       : ListingStatus
listedDate          : Date
lastUpdatedDate     : Date
sustainabilityScore : Float
+createListing(name : String, description : String, category : ProductCategory) : ValidationResult //UC5 //action: create product listing
+validateProductDetails() : ValidationResult //UC5 //action: validate product information
+updateListing(name : String, description : String, category : ProductCategory) : ValidationResult //UC13 //action: modify product details
+updateInventory(quantity : Integer) : void //UC13 //action: update product quantity
+publishListing() : void //UC5 //action: publish product listing
+archiveListing() : void //UC13 //action: remove listing from active status
+calculateSustainabilityScore() : Float //UC5 //action: compute product sustainability score
}
class SearchFilter {
categories  : ProductCategory[]
location    : Address
maxDistance : Float
keywords    : String
+applyFilter(products : Product[]) : Product[] //UC14 //action: filter products by criteria
+addCategory(category : ProductCategory) : void //UC14 //action: add category filter
+setLocationRadius(location : Address, radius : Float) : void //UC14 //action: set geographic search area
+addKeyword(keyword : String) : void //UC14 //action: add search term
+validateFilter() : ValidationResult //UC14 //action: check filter validity
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {
pointId        : UUID
name           : String
type           : PointType
position       : Coordinates
operatingHours : OpeningHours[]
+addOperatingHours(hours : OpeningHours) : void //UC20 //action: set facility operating schedule
+validateOperatingHours() : ValidationResult //UC20 //action: verify operating hours consistency
+isOpenNow() : Boolean //UC22 //action: check if point is currently operating
+findNearbyPoints(location : Coordinates, radius : Float) : CollectionPoint[] //UC22 //action: find collection points in radius
+createCollectionPoint(name : String, type : PointType, position : Coordinates) : ValidationResult //UC20 //action: register new collection point
+updateCollectionPoint(name : String, type : PointType) : ValidationResult //UC20 //action: modify collection point details
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {
templateId : String
channel    : NotificationChannel
content    : String
+getFormattedContent(params : Map) : String //UC1 //action: prepare notification content
}
class NotificationService {
+sendVerificationEmail(recipient : UserProfile) : void //UC1 //action: send email verification
+sendPasswordResetEmail(recipient : UserProfile, token : String) : void //UC3 //action: send password reset link
+notifyServiceRequestUpdate(request : ServiceRequest) : void //UC8 //action: notify about request status change
+notifyAccountDeactivation(account : UserAccount) : void //UC15 //action: send account deactivation confirmation
+notifyServiceProvider(provider : ServiceProvider, request : ServiceRequest) : void //UC6 //action: alert service provider about new request
+selectNotificationChannel(recipient : UserProfile, type : NotificationType) : NotificationChannel //UC1 //action: choose appropriate notification method
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml