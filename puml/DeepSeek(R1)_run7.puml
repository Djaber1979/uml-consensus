@startuml  
left to right direction  
' ──────────────────────────────────────────────  
'  CORE VALUE OBJECTS  
' ──────────────────────────────────────────────  
package "Core Value Objects" {  
enum VerificationStatus {  
VERIFIED  
UNVERIFIED  
}  
enum VehicleType {  
TRUCK  
VAN  
CARGO_BIKE  
BICYCLE  
MOTORCYCLE  
COMPACTOR  
ELECTRIC_VAN  
CARGO_VAN  
}  
enum DayOfWeek {  
MON  
TUE  
WED  
THU  
FRI  
SAT  
SUN  
}  
class ValidationResult {  
valid    : Boolean  
messages : String[]  
}  
class Coordinates {  
latitude  : Float  
longitude : Float  
}  
class Address {  
street           : String  
city             : String  
zipCode          : String  
country          : String  
position         : Coordinates  
validationStatus : VerificationStatus  
+ validateAddressConsistency() : ValidationResult //UC4 //action: Check address component consistency  
}  
class TimeRange {  
start : LocalTime  
end   : LocalTime  
}  
class OpeningHours {  
dayOfWeek : DayOfWeek  
timeRange : TimeRange  
}  
Address *-- Coordinates  
OpeningHours -- TimeRange  
}  

' ──────────────────────────────────────────────  
'  USER MANAGEMENT  
' ──────────────────────────────────────────────  
package "User Management" {  
enum UserRole {  
USER  
SERVICE_PROVIDER  
PLATFORM_MANAGER  
}  
enum AccountStatus {  
ACTIVE  
DEACTIVATED  
SUSPENDED  
LOCKED  
}  
class UserAccount {  
id               : UUID  
registrationDate : Date  
accountStatus    : AccountStatus  
+ deactivate(reason: String) : void //UC15 //action: Set accountStatus to DEACTIVATED  
+ createAccount() : ValidationResult //UC1 //action: Create account with unverified status  
}  
class UserProfile {  
name                  : String  
email                 : String  
phoneNumber           : String  
address               : Address  
role                  : UserRole  
lastUpdatedDate       : Date  
accountLockedDate     : Date  
emailVerifiedDate     : Date  
emailValidationStatus : VerificationStatus  
deactivationReason    : String  
+ validateEmailFormat() : ValidationResult //UC1 //action: Check email format validity  
+ markEmailVerified() : void //UC1 //action: Set emailValidationStatus to VERIFIED  
+ updateProfileDetails(newDetails: Map) : ValidationResult //UC4 //action: Validate and update profile fields  
}  
class UserCredentials {  
encryptedPassword   : String  
lastPasswordReset   : Date  
failedLoginAttempts : Integer  
lastLoginDate       : Date  
passwordResetToken  : String  
tokenExpirationDate : Date  
email               : String  
+ validatePasswordStrength() : ValidationResult //UC1 //action: Check password complexity rules  
+ generatePasswordResetToken() : void //UC3 //action: Create time-limited reset token  
+ updatePassword(newHash: String) : void //UC3 //action: Store new encrypted password  
+ validateCredentials(inputPassword: String) : Boolean //UC2 //action: Compare encrypted passwords  
+ recordLogin() : void //UC2 //action: Update lastLoginDate  
}  
class ServiceProvider {  
providerId  : UUID  
companyName : String  
profile     : UserProfile  
+ updateServiceProfile(details: Map) : ValidationResult //UC19 //action: Modify provider-specific fields  
}  
class "RoleManager <<service>>" as RoleManager {  
+ changeUserRole(target: UserAccount, newRole: UserRole) : ValidationResult //UC21 //action: Validate and apply role transition  
}  
UserAccount ..> ValidationResult  
UserProfile ..> ValidationResult  
UserCredentials ..> ValidationResult  
RoleManager ..> ValidationResult  
UserAccount "1" --> "1" UserProfile : has >  
UserAccount "1" --> "1" UserCredentials : authenticates >  
UserAccount --> RoleManager : uses >  
UserAccount "1" -- "0..1" ServiceProvider : may act as >  
}  

' ──────────────────────────────────────────────  
'  SERVICE MANAGEMENT  
' ──────────────────────────────────────────────  
package "Service Management" {  
enum RequestType {  
COLLECTION  
TRANSPORT  
}  
enum RequestStatus {  
PENDING  
SCHEDULED  
COMPLETED  
CANCELLED  
}  
abstract class ServiceRequest {  
id                : UUID  
requestType       : RequestType  
status            : RequestStatus  
createdDate       : Date  
scheduledTime     : TimeRange  
proposedTimeSlots : TimeRange[]  
requester         : UserProfile  
handledBy         : ServiceProvider  
trackedJourney    : WasteJourney  
requestedDate     : Date  
quantity          : Integer  
categories        : ProductCategory[]  
cancelledBy       : UserProfile  
cancelledDate     : Date  
+ cancel(initiator: UserProfile) : void //UC12 //action: Set status to CANCELLED with initiator  
+ schedule(newTime: TimeRange) : void //UC8 //action: Update scheduledTime and status  
}  
class CollectionRequest extends ServiceRequest {  
vehicleType : VehicleType  
location    : Address  
+ validateVehicleCapacity() : Boolean //UC8 //action: Check vehicle suitability  
}  
class TransportRequest extends ServiceRequest {  
routePlan : RoutePlan  
+ optimizeRoute() : void //UC9 //action: Calculate efficient waypoints  
}  
class ServiceRequestDetails {  
payload : Map  
}  
ServiceRequest ..> ServiceRequestDetails : uses >  
class RoutePlan {  
waypoints : Coordinates[]  
+ calculateDistance() : Float //UC9 //action: Compute total route length  
}  
ServiceProvider "1" --> "*" ServiceRequest : handles >  
TransportRequest -- RoutePlan  
ServiceRequest --> WasteJourney : tracked by >  
ServiceRequest --> UserProfile : requester >  
ServiceRequest --> ServiceProvider : handled by >  
}  

' ──────────────────────────────────────────────  
'  WASTE TRACKING  
' ──────────────────────────────────────────────  
package "Waste Tracking" {  
enum TrackingStatus {  
IN_PROGRESS  
COMPLETED  
CANCELLED  
}  
enum Stage {  
COLLECTED  
IN_TRANSIT  
PROCESSED  
RECYCLED  
}  
class WasteJourney {  
journeyId       : UUID  
trackingCode    : String  
stages          : Stage[]  
status          : TrackingStatus  
currentLocation : Address  
+ updateStage(newStage: Stage) : void //UC10 //action: Add stage and update status  
+ getCurrentStatus() : Map //UC10 //action: Return status and location  
}  
WasteJourney ..> ValidationResult  
}  

' ──────────────────────────────────────────────  
'  PRODUCT MANAGEMENT  
' ──────────────────────────────────────────────  
package "Product Management" {  
enum ProductCategory {  
RECYCLABLE_PLASTIC  
ELECTRONIC_WASTE  
ORGANIC_MATERIAL  
METAL  
GLASS  
TEXTILES  
PAPER  
}  
enum ListingStatus {  
DRAFT  
PENDING_APPROVAL  
PUBLISHED  
REJECTED  
ARCHIVED  
}  
class Product {  
productId           : UUID  
name                : String  
description         : String  
category            : ProductCategory  
inventory           : Integer  
listingStatus       : ListingStatus  
listedDate          : Date  
lastUpdatedDate     : Date  
sustainabilityScore : Float  
+ publishListing() : ValidationResult //UC5 //action: Change status to PUBLISHED after validation  
+ updateDetails(newData: Map) : ValidationResult //UC13 //action: Validate and modify product fields  
}  
class SearchFilter {  
categories  : ProductCategory[]  
location    : Address  
maxDistance : Float  
keywords    : String  
+ applyFilters() : Product[] //UC14 //action: Return matching products  
}  
Product ..> ValidationResult  
SearchFilter ..> ValidationResult  
Product "1" --> "*" CollectionPoint : available at >  
Product "1" --> "1" UserProfile      : requester >  
SearchFilter --> "*" Product            : filters >  
}  

' ──────────────────────────────────────────────  
'  LOCATION MANAGEMENT  
' ──────────────────────────────────────────────  
package "Location Management" {  
enum PointType {  
COLLECTION_CENTER  
RECYCLING_PLANT  
REUSE_STORE  
}  
class CollectionPoint {  
pointId        : UUID  
name           : String  
type           : PointType  
position       : Coordinates  
operatingHours : OpeningHours[]  
+ validateOperatingHours() : ValidationResult //UC20 //action: Check time range validity  
}  
CollectionPoint ..> ValidationResult  
CollectionPoint *-- Coordinates  
CollectionPoint *-- OpeningHours  
CollectionPoint -- Address : located at >  
ServiceProvider "1" --> "*" CollectionPoint : operates at >  
}  

' ──────────────────────────────────────────────  
'  NOTIFICATION SERVICES  
' ──────────────────────────────────────────────  
package "Notification Services" {  
enum NotificationType {  
REGISTRATION_SUCCESS  
NEW_REQUEST  
DISPATCH_ALERT  
PASSWORD_RESET  
PASSWORD_RESET_CONFIRM  
REQUEST_ACCEPTED  
ACCOUNT_DEACTIVATION  
}  
enum NotificationChannel{  
EMAIL  
SMS  
PUSH  
}  
class NotificationTemplate {  
templateId : String  
channel    : NotificationChannel  
content    : String  
}  
class NotificationService {  
+ generateNotification(type: NotificationType) : NotificationTemplate //UC1,UC3,UC15 //action: Create appropriate message template  
}  
NotificationService ..> NotificationTemplate  
NotificationService --> UserProfile     : notifies >  
NotificationService --> ServiceProvider : alerts >  
}  
@enduml