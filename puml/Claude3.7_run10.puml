@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {
valid    : Boolean
messages : String[]
}
class Coordinates {
latitude  : Float
longitude : Float
}
class Address {
street           : String
city             : String
zipCode          : String
country          : String
position         : Coordinates
validationStatus : VerificationStatus

+validate() : ValidationResult //UC1 //action: validate address format and existence
+verify() : void //UC1 //action: mark address as verified
}
class TimeRange {
start : LocalTime
end   : LocalTime

+overlaps(other : TimeRange) : Boolean //UC19 //action: check if time ranges overlap
+contains(time : LocalTime) : Boolean //UC8 //action: check if a specific time is within the range
}
class OpeningHours {
dayOfWeek : DayOfWeek
timeRange : TimeRange

+isAvailableAt(day : DayOfWeek, time : LocalTime) : Boolean //UC8 //action: check if service is available at specific day and time
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {
id               : UUID
registrationDate : Date
accountStatus    : AccountStatus

+register(profile : UserProfile, credentials : UserCredentials) : ValidationResult //UC1 //action: register new user account
+activate() : void //UC1 //action: activate user account after email verification
+deactivate(reason : String) : void //UC15 //action: soft-deactivate a user account
+lock() : void //UC2 //action: lock account after failed login attempts
+unlock() : void //UC3 //action: unlock account after password reset
+updateStatus(status : AccountStatus) : void //UC21 //action: update account status
}
class UserProfile {
name                  : String
email                 : String
phoneNumber           : String
address               : Address
role                  : UserRole
lastUpdatedDate       : Date
accountLockedDate     : Date
emailVerifiedDate     : Date
emailValidationStatus : VerificationStatus
deactivationReason    : String

+updateProfile(name : String, phoneNumber : String, address : Address) : ValidationResult //UC4 //action: update profile information
+verifyEmail() : void //UC1 //action: mark email as verified
+changeRole(newRole : UserRole) : ValidationResult //UC21 //action: change user role
+validateEmail() : ValidationResult //UC1 //action: validate email format
}
class UserCredentials {
encryptedPassword   : String
lastPasswordReset   : Date
failedLoginAttempts : Integer
lastLoginDate       : Date
passwordResetToken  : String
tokenExpirationDate : Date
email               : String

+authenticate(email : String, password : String) : ValidationResult //UC2 //action: authenticate user credentials
+resetPassword(newPassword : String) : ValidationResult //UC3 //action: reset user password
+generatePasswordResetToken() : String //UC3 //action: generate token for password reset
+validatePasswordStrength(password : String) : ValidationResult //UC1 //action: validate password meets strength requirements
+isTokenValid() : Boolean //UC3 //action: check if password reset token is valid
+recordLoginAttempt(success : Boolean) : void //UC2 //action: record login attempt status
+recordLoginTime() : void //UC2 //action: record successful login timestamp
+recordLogoutTime() : void //UC16 //action: record logout timestamp
+incrementFailedAttempts() : Integer //UC2 //action: increment failed login counter
+resetFailedAttempts() : void //UC2 //action: reset failed login counter after successful login
}
class ServiceProvider {
providerId  : UUID
companyName : String
profile     : UserProfile

+updateProfile(companyName : String) : ValidationResult //UC19 //action: update service provider profile
+addServiceArea(area : Address) : void //UC19 //action: add service area
+removeServiceArea(area : Address) : void //UC19 //action: remove service area
}
class "RoleManager <<service>>" as RoleManager {
+assignRole(account : UserAccount, role : UserRole) : ValidationResult //UC21 //action: assign role to user account
+validateRoleTransition(currentRole : UserRole, newRole : UserRole) : ValidationResult //UC21 //action: validate if role transition is allowed
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {
id                : UUID
requestType       : RequestType
status            : RequestStatus
createdDate       : Date
scheduledTime     : TimeRange
proposedTimeSlots : TimeRange[]
requester         : UserProfile
handledBy         : ServiceProvider
trackedJourney    : WasteJourney
requestedDate     : Date
quantity          : Integer
categories        : ProductCategory[]
cancelledBy       : UserProfile
cancelledDate     : Date

+submit() : ValidationResult //UC6 //action: submit service request
+schedule(timeSlot : TimeRange) : void //UC8 //action: schedule service request
+complete() : void //UC8 //action: mark service request as completed
+cancel(cancelledBy : UserProfile) : void //UC12 //action: cancel service request
+accept(provider : ServiceProvider) : void //UC8 //action: accept service request by provider
+propose(timeSlots : TimeRange[]) : void //UC8 //action: propose alternative time slots
+validate() : ValidationResult //UC6 //action: validate service request details
+assignJourney(journey : WasteJourney) : void //UC10 //action: assign waste journey to request
}
class CollectionRequest extends ServiceRequest {
vehicleType : VehicleType
location    : Address

+assignVehicle(vehicleType : VehicleType) : void //UC8 //action: assign vehicle type to collection request
}
class TransportRequest extends ServiceRequest {
routePlan : RoutePlan

+assignRoutePlan(plan : RoutePlan) : void //UC9 //action: assign route plan to transport request
}
class RoutePlan {
waypoints : Coordinates[]

+addWaypoint(point : Coordinates) : void //UC9 //action: add waypoint to route plan
+optimizeRoute() : void //UC9 //action: optimize route based on waypoints
+validate() : ValidationResult //UC9 //action: validate route plan
}
ServiceProvider "1" --> "*" ServiceRequest : handles >
TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {
journeyId       : UUID
trackingCode    : String
stages          : Stage[]
status          : TrackingStatus
currentLocation : Address

+generateTrackingCode() : String //UC10 //action: generate unique tracking code
+updateLocation(location : Address) : void //UC10 //action: update current waste location
+addStage(stage : Stage) : void //UC10 //action: add stage to waste journey
+completeJourney() : void //UC10 //action: mark journey as completed
+cancelJourney() : void //UC10 //action: cancel waste journey
+validateTrackingCode(code : String) : ValidationResult //UC10 //action: validate tracking code format and existence
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {
productId           : UUID
name                : String
description         : String
category            : ProductCategory
inventory           : Integer
listingStatus       : ListingStatus
listedDate          : Date
lastUpdatedDate     : Date
sustainabilityScore : Float

+createListing(name : String, description : String, category : ProductCategory, inventory : Integer) : ValidationResult //UC5 //action: create new product listing
+updateListing(name : String, description : String, category : ProductCategory, inventory : Integer) : ValidationResult //UC13 //action: update product listing
+publish() : void //UC5 //action: publish product listing
+archive() : void //UC13 //action: archive product listing
+calculateSustainabilityScore() : Float //UC5 //action: calculate sustainability score based on product attributes
+validateListing() : ValidationResult //UC5 //action: validate product listing details
}
class SearchFilter {
categories  : ProductCategory[]
location    : Address
maxDistance : Float
keywords    : String

+applyFilter(products : Product[]) : Product[] //UC14 //action: filter products based on criteria
+matchesKeywords(product : Product) : Boolean //UC14 //action: check if product matches keywords
+withinDistance(product : Product) : Boolean //UC14 //action: check if product is within specified distance
+matchesCategories(product : Product) : Boolean //UC14 //action: check if product matches categories
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {
pointId        : UUID
name           : String
type           : PointType
position       : Coordinates
operatingHours : OpeningHours[]

+addOperatingHours(hours : OpeningHours) : void //UC20 //action: add operating hours to collection point
+updateOperatingHours(day : DayOfWeek, timeRange : TimeRange) : void //UC20 //action: update operating hours for specific day
+isOperatingAt(day : DayOfWeek, time : LocalTime) : Boolean //UC22 //action: check if collection point is operating at specific time
+validate() : ValidationResult //UC20 //action: validate collection point details
+calculateDistance(location : Coordinates) : Float //UC22 //action: calculate distance from user location
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {
templateId : String
channel    : NotificationChannel
content    : String

+render(data : Object) : String //UC1 //action: render notification template with data
}
class NotificationService {
+sendNotification(recipient : UserProfile, type : NotificationType, data : Object) : void //UC1 //action: send notification to user
+sendVerificationEmail(email : String, token : String) : void //UC1 //action: send email verification
+sendPasswordResetEmail(email : String, token : String) : void //UC3 //action: send password reset email
+notifyRequestAccepted(request : ServiceRequest) : void //UC8 //action: notify user about accepted request
+notifyAccountDeactivation(account : UserAccount) : void //UC15 //action: notify user about account deactivation
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml