@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {

valid    : Boolean

messages : String[]
}
class Coordinates {

latitude  : Float

longitude : Float
}
class Address {

street           : String

city             : String

zipCode          : String

country          : String

position         : Coordinates

validationStatus : VerificationStatus

+ validateConsistency() : ValidationResult //UC4 //action: Validate address field consistency
}
class TimeRange {

start : LocalTime

end   : LocalTime
}
class OpeningHours {

dayOfWeek : DayOfWeek

timeRange : TimeRange

+ validateTimeSlots() : ValidationResult //UC20 //action: Validate operating hour time ranges
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {

id               : UUID

registrationDate : Date

accountStatus    : AccountStatus

+ createAccount(profile: UserProfile, credentials: UserCredentials) //UC1 //action: Create user account with unverified status
+ recordLogin() //UC2 //action: Update last login timestamp
+ deactivateAccount(reason: String) //UC15 //action: Mark account as deactivated
+ incrementFailedAttempts() //UC2 //action: Track failed login attempts
+ resetLoginAttempts() //UC2 //action: Clear failed attempts on successful login
}
class UserProfile {

name                  : String

email                 : String

phoneNumber           : String

address               : Address

role                  : UserRole

lastUpdatedDate       : Date

accountLockedDate     : Date

emailVerifiedDate     : Date

emailValidationStatus : VerificationStatus

deactivationReason    : String

+ verifyEmail() //UC1 //action: Mark email as verified
+ updateContactDetails(phone: String, address: Address) : ValidationResult //UC4 //action: Validate and update profile fields
+ validateEmailFormat() : ValidationResult //UC1 //action: Check email syntax validity
}
class UserCredentials {

encryptedPassword   : String

lastPasswordReset   : Date

failedLoginAttempts : Integer

lastLoginDate       : Date

passwordResetToken  : String

tokenExpirationDate : Date

email               : String

+ validatePasswordStrength() : ValidationResult //UC1 //action: Check password complexity rules
+ generateResetToken() //UC3 //action: Create password reset credentials
+ updatePassword(newPassword: String) //UC3 //action: Store new encrypted password
+ authenticate(attempt: String) : Boolean //UC2 //action: Verify password match
}
class ServiceProvider {

providerId  : UUID

companyName : String

profile     : UserProfile

+ updateServiceDetails(vehicles: VehicleType[], hours: OpeningHours[]) : ValidationResult //UC19 //action: Validate and update provider capabilities
}
class "RoleManager <<service>>" as RoleManager {
+ assignRole(user: UserAccount, newRole: UserRole) : ValidationResult //UC21 //action: Enforce valid role transitions
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {

id                : UUID

requestType       : RequestType

status            : RequestStatus

createdDate       : Date

scheduledTime     : TimeRange

proposedTimeSlots : TimeRange[]

requester         : UserProfile

handledBy         : ServiceProvider

trackedJourney    : WasteJourney

requestedDate     : Date

quantity          : Integer

categories        : ProductCategory[]

cancelledBy       : UserProfile

cancelledDate     : Date

+ validateRequestConstraints() : ValidationResult //UC6 //action: Check minimum quantity/category rules
+ cancelRequest(byUser: UserProfile) //UC12 //action: Mark request as cancelled
+ assignToProvider(provider: ServiceProvider) //UC8 //action: Link service provider to request
+ scheduleCollection(time: TimeRange) //UC8 //action: Finalize collection timeframe
}
class CollectionRequest extends ServiceRequest {

vehicleType : VehicleType

location    : Address

+ validateVehicleCompatability() : ValidationResult //UC8 //action: Check vehicle matches location/quantity
}
class TransportRequest extends ServiceRequest {

routePlan : RoutePlan

+ generateRoutePlan(waypoints: Coordinates[]) //UC9 //action: Create optimized transport path
}
class ServiceRequestDetails {

payload : Map
}
ServiceRequest ..> ServiceRequestDetails : uses >
class RoutePlan {

waypoints : Coordinates[]

+ optimizeRoute() //UC9 //action: Calculate efficient transportation path
}
ServiceProvider "1" --> "*" ServiceRequest : handles >

TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {

journeyId       : UUID

trackingCode    : String

stages          : Stage[]

status          : TrackingStatus

currentLocation : Address

+ updateLocation(position: Coordinates) //UC10 //action: Record current transport position
+ addProcessingStage(stage: Stage) //UC10 //action: Mark new waste treatment phase
+ validateTrackingCode(code: String) : Boolean //UC10 //action: Verify code authenticity
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {

productId           : UUID

name                : String

description         : String

category            : ProductCategory

inventory           : Integer

listingStatus       : ListingStatus

listedDate          : Date

lastUpdatedDate     : Date

sustainabilityScore : Float

+ publishListing() //UC5 //action: Change status to published
+ validateCategoryRules() : ValidationResult //UC5 //action: Check product categorization
+ updateInventory(count: Integer) //UC13 //action: Modify available quantity
}
class SearchFilter {

categories  : ProductCategory[]

location    : Address

maxDistance : Float

keywords    : String

+ applyFilters(products: Product[]) : Product[] //UC14 //action: Match products to search criteria
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {

pointId        : UUID

name           : String

type           : PointType

position       : Coordinates

operatingHours : OpeningHours[]

+ validateLocationUniqueness() : ValidationResult //UC20 //action: Prevent duplicate point registrations
+ updateOperatingHours(hours: OpeningHours[]) //UC20 //action: Modify available service times
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {

templateId : String

channel    : NotificationChannel

content    : String
}
class NotificationService {
+ generateVerificationMessage() : NotificationTemplate //UC1 //action: Create email verification content
+ preparePasswordResetTemplate() : NotificationTemplate //UC3 //action: Build password reset message
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml