@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {

valid    : Boolean

messages : String[]
}
class Coordinates {

latitude  : Float

longitude : Float
}
class Address {

street           : String

city             : String

zipCode          : String

country          : String

position         : Coordinates

validationStatus : VerificationStatus

    +validate() : ValidationResult //UC4 //action: Validate address consistency
}
class TimeRange {

start : LocalTime

end   : LocalTime
}
class OpeningHours {

dayOfWeek : DayOfWeek

timeRange : TimeRange
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {

id               : UUID

registrationDate : Date

accountStatus    : AccountStatus

    +{static} register(profileData: UserProfile, credentialData: UserCredentials): UserAccount //UC1 //action: Create a user account with unverified email status
    -changeStatus(newStatus: AccountStatus) // Helper for state changes
    +deactivate(reason: String) //UC15 //action: Deactivate the account
    +lock() //UC2 //action: Temporarily lock the account after failed logins
    +unlock() // Implied action for recovery or admin intervention
    +recordLogin() //UC2 //action: Record the login timestamp (handled by updating UserCredentials)
    +updateLastUpdated() //UC4 //action: Record the modification timestamp for account-related changes (if any beyond profile/credentials)
    +assignRole(role: UserRole, manager: RoleManager) //UC21 //action: Update the user's role (delegated to RoleManager for validation)
}
class UserProfile {

name                  : String

email                 : String

phoneNumber           : String

address               : Address

role                  : UserRole

lastUpdatedDate       : Date

accountLockedDate     : Date

emailVerifiedDate     : Date

emailValidationStatus : VerificationStatus

deactivationReason    : String

    +validateEmailFormat() : ValidationResult //UC1 //action: Validate email format
    +verifyEmail() //UC1 //action: Mark the email as verified
    +updateProfile(name: String, phone: String, address: Address) //UC4 //action: Update user profile information
    +updateRole(newRole: UserRole) //UC21 //action: System updates the user’s role (actual state change)
    +setDeactivationReason(reason: String) //UC15 //action: Record deactivation reason
    +updateEmail(newEmail: String) // Potential action for UC4, requires re-verification logic
}
class UserCredentials {

encryptedPassword   : String

lastPasswordReset   : Date

failedLoginAttempts : Integer

lastLoginDate       : Date

passwordResetToken  : String

tokenExpirationDate : Date

email               : String

    +validatePasswordStrength() : ValidationResult //UC1 //action: Validate password strength
    +verifyPassword(password: String): Boolean //UC2 //action: Validate credentials (password check part)
    +incrementFailedLoginAttempts() //UC2 //action: Increment failed login attempts
    +resetFailedLoginAttempts() //UC2 //action: Reset failed login attempts on successful login
    +generatePasswordResetToken() : String //UC3 //action: Generate a password reset token
    +validatePasswordResetToken(token: String): Boolean //UC3 //action: Validate the provided password reset token
    +updatePassword(newPassword: String) //UC3 //action: Update the password
    +recordSuccessfulLogin() //UC2 //action: Record the login timestamp
    +isLoginAllowed(maxAttempts: Integer): Boolean //UC2 //action: Check if login attempts exceed threshold
}
class ServiceProvider {

providerId  : UUID

companyName : String

profile     : UserProfile

    +updateDetails(companyName: String, /* other provider specific details */) //UC19 //action: Update service provider specific details (e.g., company name)
    +updateProfileSettings(serviceAreas: String[], vehicleTypes: VehicleType[], availability: OpeningHours[]) //UC19 //action: Update service provider profile settings (assuming these are stored/managed here or linked classes not shown)
    +checkAvailability(request: ServiceRequest): Boolean //UC8 //action: Check availability/capacity for the requested date/time for a collection request
    +checkFeasibility(request: TransportRequest): Boolean //UC9 //action: Check vehicle availability/logistics feasibility for a transport request
    +dispatchCollectionTeam(request: CollectionRequest) //UC8 //action: Dispatch a team or vehicle for collection (internal state change if any, e.g., assigning resources)
    +performTransport(request: TransportRequest) //UC9 //action: Perform pickup, transit, and drop-off (internal state change if any)
}
class "RoleManager <<service>>" as RoleManager {
    +validateRoleTransition(currentUserRole: UserRole, requestedUserRole: UserRole): ValidationResult //UC21 //action: Validate the role transition request
    +assignRoleToUser(userAccount: UserAccount, role: UserRole): ValidationResult //UC21 //action: Assigns the role to the user after validation
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {

id                : UUID

requestType       : RequestType

status            : RequestStatus

createdDate       : Date

scheduledTime     : TimeRange

proposedTimeSlots : TimeRange[]

requester         : UserProfile

handledBy         : ServiceProvider

trackedJourney    : WasteJourney

requestedDate     : Date

quantity          : Integer

categories        : ProductCategory[]

cancelledBy       : UserProfile

cancelledDate     : Date

    +schedule(provider: ServiceProvider, time: TimeRange) //UC8, UC9 //action: Schedule the request with a provider and time
    +accept(provider: ServiceProvider, scheduledTime: TimeRange) //UC8, UC9 //action: Accept the request and finalize scheduling
    +cancel(cancellingUser: UserProfile) //UC12 //action: Cancel the service request
    +updateStatus(newStatus: RequestStatus) // Helper for internal state changes
    +complete() //UC8, UC9 //action: Mark the request as completed
    +assignProvider(provider: ServiceProvider) //UC8, UC9 //action: Assign a service provider to the request
}
class CollectionRequest extends ServiceRequest {

vehicleType : VehicleType

location    : Address

    +{static} create(requester: UserProfile, details: Map<String, Object>): CollectionRequest //UC6 //action: Create a new collection request instance
    +completeCollection() //UC8 //action: Mark the collection request as completed and update waste journey
}
class TransportRequest extends ServiceRequest {

routePlan : RoutePlan

    +{static} create(requester: UserProfile, details: Map<String, Object>): TransportRequest //UC6 //action: Create a new transport request instance
    +planRoute(waypoints: Coordinates[]) //UC9 //action: Plan the transport route
    +completeTransport() //UC9 //action: Mark the transport request as completed and update waste journey
}

class RoutePlan {

waypoints : Coordinates[]
}
ServiceProvider "1" --> "*" ServiceRequest : handles >

TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {

journeyId       : UUID

trackingCode    : String

stages          : Stage[]

status          : TrackingStatus

currentLocation : Address

    +startTracking() : String // Implied action when SR is scheduled/accepted, generates tracking code
    +recordStage(stage: Stage, location: Address) //UC8, UC9 //action: Record a new stage in the waste journey
    +updateLocation(location: Address) // Helper method if needed
    +completeJourney() // Implied action when final stage reached
    +cancelJourney() //UC12 //action: Cancel tracking if the service request is cancelled
    +getStatus(): TrackingStatus //UC10 //action: Get current tracking status
    +getStages(): Stage[] //UC10 //action: Get completed stages
    +getCurrentLocation(): Address //UC10 //action: Get current location
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {

productId           : UUID

name                : String

description         : String

category            : ProductCategory

inventory           : Integer

listingStatus       : ListingStatus

listedDate          : Date

lastUpdatedDate     : Date

sustainabilityScore : Float

    +{static} createListing(details: Map<String, Object>, requester: UserProfile): Product //UC5 //action: Create a new product listing
    +validateDetails(): ValidationResult //UC5, UC13 //action: Validate product details
    +publish() //UC5 //action: Publish the product listing
    +updateDetails(details: Map<String, Object>) //UC13 //action: Update product details
    +archive() // Implied action, maybe related to UC13 or admin functions
    +reject(reason: String) // Implied action for admin/platform manager
    +updateInventory(change: Integer) // Implied action when product is collected/transacted
}
class SearchFilter {

categories  : ProductCategory[]

location    : Address

maxDistance : Float

keywords    : String

    +validate() : ValidationResult // Implied validation if needed
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {

pointId        : UUID

name           : String

type           : PointType

position       : Coordinates

operatingHours : OpeningHours[]

    +{static} createPoint(details: Map<String, Object>, manager: UserProfile): CollectionPoint //UC20 //action: Create a new collection point
    +updateDetails(details: Map<String, Object>) //UC20 //action: Update collection point details
    +validateDetails(): ValidationResult //UC20 //action: Validate collection point details (address, hours)
    +deactivate() //UC20 //action: Deactivate a collection point
    +addOperatingHours(hours: OpeningHours) //UC20 //action: Add operating hours
    +removeOperatingHours(day: DayOfWeek) //UC20 //action: Remove operating hours
    +updateOperatingHours(hours: OpeningHours) //UC20 //action: Update existing operating hours
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {

templateId : String

channel    : NotificationChannel

content    : String
}
class NotificationService {
    +sendVerificationEmail(userProfile: UserProfile) //UC1 //action: Send a verification email to the user
    +sendRegistrationSuccess(userProfile: UserProfile) //UC1 //action: Send confirmation of successful registration
    +sendPasswordResetLink(userCredentials: UserCredentials) //UC3 //action: Send a password reset link to the email
    +sendPasswordResetConfirmation(userProfile: UserProfile) //UC3 //action: Notify user of successful password reset
    +sendRequestAcceptedNotification(request: ServiceRequest) //UC8, UC9 //action: Notify the user that the request is accepted/scheduled
    +sendRequestStatusUpdate(request: ServiceRequest) // Implied action for status changes
    +sendAccountDeactivationConfirmation(userProfile: UserProfile) //UC15 //action: Send confirmation of account deactivation
    +sendNewRequestNotification(provider: ServiceProvider, request: ServiceRequest) //UC8, UC9 //action: Notify service provider of a new request
    +sendDispatchRequestAlert(provider: ServiceProvider, request: ServiceRequest) //UC8 //action: Notify provider about dispatch (if applicable)
    +sendProviderProfileChangeNotification(provider: ServiceProvider) //UC18 //action: Notify provider of changes to their profile/status
    +sendAccountLockedNotification(userProfile: UserProfile) //UC2 //action: Notify user their account is locked
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml