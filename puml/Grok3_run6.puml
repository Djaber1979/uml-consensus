@startuml

' Packages
package "User Management" {
  class UserAccount {
    accountStatus : AccountStatus
    + {static} createAccount(profile: UserProfile, credentials: UserCredentials): UserAccount //UC1: Create user account
    + canLogin(): boolean //UC2: Check if can login
    + deactivate(reason: String): void //UC15: Deactivate account
  }
  
  class UserProfile {
    name                  : String
    email                 : String
    phoneNumber           : String
    address               : Address
    role                  : UserRole
    lastUpdatedDate       : Date
    accountLockedDate     : Date
    emailVerifiedDate     : Date
    emailValidationStatus : VerificationStatus
    deactivationReason    : String
    + {static} create(name: String, email: String, phoneNumber: String, address: Address, role: UserRole): UserProfile //UC1: Create unverified profile
    + validate(): ValidationResult //UC1: Validate profile data
    + verifyEmail(): void //UC1: Verify email
    + setName(name: String): ValidationResult //UC4: Update name
    + setPhoneNumber(phoneNumber: String): ValidationResult //UC4: Update phone number
    + setAddress(address: Address): ValidationResult //UC4: Update address
    + setRole(role: UserRole): ValidationResult //UC21: Update role
  }
  
  class UserCredentials {
    email               : String
    encryptedPassword   : String
    lastLoginDate       : Date
    passwordResetToken  : String
    tokenExpirationDate : Date
    + {static} create(email: String, password: String): UserCredentials //UC1: Create credentials
    + validate(): ValidationResult //UC1: Validate credentials
    + verifyPassword(password: String): boolean //UC2: Verify password for login
    + recordLogin(): void //UC2: Record login timestamp
    + generatePasswordResetToken(): String //UC3: Generate reset token
    + validateResetToken(token: String): boolean //UC3: Validate reset token
    + setNewPassword(newPassword: String): void //UC3: Set new password
  }
  
  class RoleManager <<service>> {
  }
}

package "Notification Services" {
  class NotificationService {
    + sendVerificationEmail(userProfile: UserProfile): void //UC1: Send verification email
    + sendRegistrationConfirmation(userProfile: UserProfile): void //UC1: Send registration confirmation
    + sendPasswordResetEmail(userProfile: UserProfile, token: String): void //UC3: Send password reset email
    + sendPasswordResetConfirmation(userProfile: UserProfile): void //UC3: Send password reset confirmation
    + sendRequestAcceptedNotification(request: ServiceRequest): void //UC8, UC9: Send request accepted notification
    + sendDeactivationConfirmation(userProfile: UserProfile): void //UC15: Send deactivation confirmation
    + sendProviderUpdateNotification(serviceProvider: ServiceProvider): void //UC18: Send provider update notification
  }
  
  class NotificationTemplate {
    notificationType : NotificationType
    content          : String
  }
}

package "Product Management" {
  class Product {
    productId       : String
    name            : String
    description     : String
    category        : ProductCategory
    inventory       : Integer
    listingStatus   : ListingStatus
    lastUpdatedDate : Date
    requester       : UserProfile
    + {static} createAndPublish(name: String, description: String, category: ProductCategory, inventory: Integer, requester: UserProfile): ValidationResult //UC5: Create and publish product
    + setName(name: String): ValidationResult //UC13: Update name
    + setDescription(description: String): ValidationResult //UC13: Update description
    + setCategory(category: ProductCategory): ValidationResult //UC13: Update category
    + setInventory(inventory: Integer): ValidationResult //UC13: Update inventory
  }
  
  class SearchFilter {
    categories   : ProductCategory[*]
    location     : Address
    maxDistance  : Integer
    keywords     : String[*]
    + findMatchingProducts(): Product[] //UC14: Find matching products
  }
}

package "Service Management" {
  abstract class ServiceRequest {
    id              : String
    requestType     : RequestType
    status          : RequestStatus
    createdDate     : Date
    scheduledTime   : TimeRange
    proposedTimeSlots : TimeRange[*]
    requester       : UserProfile
    handledBy       : ServiceProvider
    cancelledBy     : UserProfile
    cancelledDate   : Date
    + {static} getRequestsByRequester(requester: UserProfile): ServiceRequest[] //UC11: Get requests by requester
    + cancel(): void //UC12: Cancel request
  }
  
  class CollectionRequest {
    vehicleType : VehicleType
    location    : Address
    quantity    : Integer
    categories  : ProductCategory[*]
    + {static} create(requester: UserProfile, vehicleType: VehicleType, location: Address, quantity: Integer, categories: ProductCategory[], proposedTimeSlots: TimeRange[], handledBy: ServiceProvider = null): CollectionRequest //UC6: Create collection request
    + accept(provider: ServiceProvider, scheduledTime: TimeRange): void //UC8: Accept collection request
    + markAsCollected(): void //UC8: Mark as collected
  }
  
  class TransportRequest {
    routePlan  : RoutePlan
    quantity   : Integer
    categories : ProductCategory[*]
    + {static} create(requester: UserProfile, routePlan: RoutePlan, quantity: Integer, categories: ProductCategory[], proposedTimeSlots: TimeRange[], handledBy: ServiceProvider = null): TransportRequest //UC6: Create transport request
    + accept(provider: ServiceProvider, scheduledTime: TimeRange): void //UC9: Accept transport request
    + markAsCompleted(): void //UC9: Mark as completed
  }
  
  class ServiceProvider {
    providerId   : String
    companyName  : String
    profile      : UserProfile
    + getPendingCollectionRequests(): CollectionRequest[] //UC8: Get pending collection requests
    + getPendingTransportRequests(): TransportRequest[] //UC9: Get pending transport requests
    + {static} create(userAccount: UserAccount, companyName: String): ServiceProvider //UC18: Create service provider
    + setCompanyName(companyName: String): ValidationResult //UC19: Update company name
  }
  
  class WasteJourney {
    journeyId        : String
    trackingCode     : String
    stages           : JourneyStage[*]
    status           : TrackingStatus
    currentLocation  : Address
    + {static} findByTrackingCode(trackingCode: String): WasteJourney //UC10: Find waste journey by tracking code
  }
  
  class CollectionPoint {
    pointId         : String
    name            : String
    type            : PointType
    position        : Coordinates
    operatingHours  : OpeningHours[*]
    + {static} create(name: String, type: PointType, position: Coordinates, operatingHours: OpeningHours[], address: Address): CollectionPoint //UC20: Create collection point
    + setName(name: String): ValidationResult //UC20: Update name
    + setType(type: PointType): ValidationResult //UC20: Update type
    + setPosition(position: Coordinates): ValidationResult //UC20: Update position
    + setOperatingHours(operatingHours: OpeningHours[]): ValidationResult //UC20: Update operating hours
    + setAddress(address: Address): ValidationResult //UC20: Update address
    + {static} getAll(): CollectionPoint[] //UC22: Get all collection points
  }
}

' Relationships (unchanged from original, example subset)
UserAccount "1" --> "1" UserProfile
UserAccount "1" --> "1" UserCredentials
UserAccount "1" --> "0..1" ServiceProvider : may act as >
ServiceProvider "1" --> "*" ServiceRequest : handles >
NotificationService "1" --> "*" NotificationTemplate : uses >
SearchFilter "1" --> "*" Product : filters >

' Enums (unchanged, example subset)
enum AccountStatus {
  ACTIVE
  DEACTIVATED
  SUSPENDED
  LOCKED
}

enum VerificationStatus {
  VERIFIED
  UNVERIFIED
}

@enduml