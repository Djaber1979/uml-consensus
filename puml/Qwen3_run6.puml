@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {

valid    : Boolean

messages : String[]
}
class Coordinates {

latitude  : Float

longitude : Float
}
class Address {

street           : String

zipCode          : String

country          : String

position         : Coordinates

validationStatus : VerificationStatus

+verifyAddress() : ValidationResult //Uc4/action: Validate address consistency
}
class TimeRange {

start : LocalTime

end   : LocalTime
}
class OpeningHours {

dayOfWeek : DayOfWeek

timeRange : TimeRange
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {

id               : UUID

registrationDate : Date

accountStatus    : AccountStatus

lastLoginDate    : Date

+createUnverifiedAccount(email: String) : UserAccount //Uc1/action: Create account with unverified status
+deactivateAccount(reason: String) //Uc15/action: Soft-deactivate account
+terminateSession() //Uc16/action: End user session
+updateLastLoginDate() //Uc2/action: Record login timestamp
+incrementFailedLoginAttempts() //Uc2/action: Track failed login attempts
+lockAccount() //Uc2/action: Temporarily lock account
}
class UserProfile {

name                  : String

email                 : String

phoneNumber           : String

address               : Address

role                  : UserRole

lastUpdatedDate       : Date

emailValidationStatus : VerificationStatus

+updateDetails(name: String, phone: String, address: Address) //Uc4/action: Modify profile information
+verifyEmail(token: String) //Uc1/action: Confirm email verification
+validateProfileData() : ValidationResult //Uc4/action: Validate profile changes
+getEmailVerificationTokenExpiration() : Date //Uc3/action: Check token validity
}
class UserCredentials {

encryptedPassword   : String

lastPasswordReset   : Date

failedLoginAttempts : Integer

passwordResetToken  : String

+validateCredentials(password: String) : Boolean //Uc2/action: Verify password match
+updatePassword(newHash: String) //Uc3/action: Update password hash
+generatePasswordResetToken() //Uc3/action: Create reset token
+isTokenValid(token: String) : Boolean //Uc3/action: Validate reset token
}
class ServiceProvider {

providerId  : UUID

companyName : String

profile     : UserProfile

+checkAvailability(time: TimeRange) : Boolean //Uc8/action: Verify scheduling feasibility
+assignToRequest(request: CollectionRequest) //Uc7/action: Assign provider to request
+dispatchVehicle(vehicleType: VehicleType) //Uc8/action: Dispatch collection vehicle
}
class "RoleManager <<service>>" as RoleManager {
+assignRole(user: UserAccount, newRole: UserRole) //Uc21/action: Manage role transitions
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {

id                : UUID

requestType       : RequestType

status            : RequestStatus

scheduledTime     : TimeRange

handledBy         : ServiceProvider

trackedJourney    : WasteJourney

cancelledBy       : UserProfile

+createRequest(requester: UserProfile) //Uc6/action: Initialize service request
+validateRequestDetails() : ValidationResult //Uc6/action: Validate submission data
+assignServiceProvider(provider: ServiceProvider) //Uc7/action: Link provider to request
+setStatus(newStatus: RequestStatus) //Uc8/action: Update request status
+cancel(cancelledBy: UserProfile) //Uc12/action: Cancel active request
+linkWasteJourney(journey: WasteJourney) //Uc10/action: Connect tracking journey
}
class CollectionRequest extends ServiceRequest {

vehicleType : VehicleType

location    : Address

+proposeAlternativeTime(alternative: TimeRange) //Uc8/action: Suggest alternate slot
}
class TransportRequest extends ServiceRequest {

routePlan : RoutePlan

+scheduleTransport(route: RoutePlan) //Uc9/action: Finalize transport schedule
}
class ServiceRequestDetails {

payload : Map
}
ServiceRequest ..> ServiceRequestDetails : uses >
class RoutePlan {

waypoints : Coordinates[]

+planRoute(start: Coordinates, end: Coordinates) //Uc9/action: Calculate transport route
}
ServiceProvider "1" --> "*" ServiceRequest : handles >

TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {

journeyId       : UUID

trackingCode    : String

stages          : Stage[]

status          : TrackingStatus

currentLocation : Address

+updateStatus(newStatus: TrackingStatus) //Uc10/action: Modify tracking status
+recordStage(stage: Stage) //Uc10/action: Log processing stage
+getCurrentLocation() : Address //Uc10/action: Retrieve current location
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {

productId           : UUID

name                : String

description         : String

category            : ProductCategory

inventory           : Integer

listingStatus       : ListingStatus

listedDate          : Date

+createListing(owner: UserProfile) //Uc5/action: Initialize product listing
+validateListingDetails() : ValidationResult //Uc5/action: Check listing validity
+updateListingDetails(name: String, description: String, inventory: Integer) //Uc13/action: Modify listing data
+setListedDate() //Uc5/action: Record publication date
}
class SearchFilter {

categories  : ProductCategory[]

maxDistance : Float

keywords    : String

+applyFilters(products: Product[]) : Product[] //Uc14/action: Process search criteria
+getFilteredResults() : Product[] //Uc14/action: Retrieve filtered listings
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {

pointId        : UUID

name           : String

type           : PointType

position       : Coordinates

operatingHours : OpeningHours[]

+validateAddress() : ValidationResult //Uc20/action: Verify address validity
+updateOperatingHours(hours: OpeningHours[]) //Uc20/action: Modify operating schedule
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
REQUEST_ACCEPTED
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {

templateId : String

channel    : NotificationChannel

content    : String
}
class NotificationService {
+sendVerificationEmail(user: UserProfile) //Uc1/action: Deliver email verification link
+sendPasswordResetLink(user: UserProfile) //Uc3/action: Deliver password reset token
+notifyRequestAccepted(request: ServiceRequest) //Uc8/action: Alert requester of acceptance
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml