@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {
valid    : Boolean
messages : String[]
+addMessage(message : String) : void //UC1 //action: add validation message
+isValid() : Boolean //UC1 //action: check if validation result is valid
}
class Coordinates {
latitude  : Float
longitude : Float
+isValid() : Boolean //UC20 //action: validate coordinates
+calculateDistance(other : Coordinates) : Float //UC14 //action: calculate distance between coordinates
}
class Address {
street           : String
city             : String
zipCode          : String
country          : String
position         : Coordinates
validationStatus : VerificationStatus
+validate() : ValidationResult //UC1 //action: validate address format and completeness
+markAsVerified() : void //UC1 //action: mark address as verified
+isVerified() : Boolean //UC1 //action: check if address is verified
}
class TimeRange {
start : LocalTime
end   : LocalTime
+isValid() : Boolean //UC20 //action: validate time range
+overlaps(other : TimeRange) : Boolean //UC19 //action: check if time ranges overlap
}
class OpeningHours {
dayOfWeek : DayOfWeek
timeRange : TimeRange
+isValid() : Boolean //UC20 //action: validate opening hours
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {
id               : UUID
registrationDate : Date
accountStatus    : AccountStatus
+register(profile : UserProfile, credentials : UserCredentials) : ValidationResult //UC1 //action: register new user account
+activate() : void //UC1 //action: activate user account
+deactivate(reason : String) : void //UC15 //action: deactivate user account
+lock() : void //UC2 //action: lock user account after failed login attempts
+unlock() : void //UC2 //action: unlock user account
+isActive() : Boolean //UC2 //action: check if account is active
+isLocked() : Boolean //UC2 //action: check if account is locked
}
class UserProfile {
name                  : String
email                 : String
phoneNumber           : String
address               : Address
role                  : UserRole
lastUpdatedDate       : Date
accountLockedDate     : Date
emailVerifiedDate     : Date
emailValidationStatus : VerificationStatus
deactivationReason    : String
+updateProfile(updatedProfile : UserProfile) : ValidationResult //UC4 //action: update user profile
+verifyEmail() : void //UC1 //action: verify email address
+isEmailVerified() : Boolean //UC1 //action: check if email is verified
+validateProfile() : ValidationResult //UC1 //action: validate profile data
}
class UserCredentials {
encryptedPassword   : String
lastPasswordReset   : Date
failedLoginAttempts : Integer
lastLoginDate       : Date
passwordResetToken  : String
tokenExpirationDate : Date
email               : String
+authenticate(email : String, password : String) : ValidationResult //UC2 //action: authenticate user
+resetPassword(newPassword : String) : ValidationResult //UC3 //action: reset user password
+generatePasswordResetToken() : String //UC3 //action: generate password reset token
+incrementFailedAttempts() : void //UC2 //action: increment failed login attempts
+resetFailedAttempts() : void //UC2 //action: reset failed login attempts counter
+isResetTokenValid() : Boolean //UC3 //action: check if reset token is valid
+updateLastLoginDate() : void //UC2 //action: update last login date
}
class ServiceProvider {
providerId  : UUID
companyName : String
profile     : UserProfile
+updateServiceProviderProfile(updatedProfile : UserProfile) : ValidationResult //UC19 //action: update service provider profile
}
class "RoleManager <<service>>" as RoleManager {
+assignRole(userAccount : UserAccount, role : UserRole) : ValidationResult //UC21 //action: assign role to user
+isRoleChangeAllowed(currentRole : UserRole, newRole : UserRole) : Boolean //UC21 //action: check if role change is allowed
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {
id                : UUID
requestType       : RequestType
status            : RequestStatus
createdDate       : Date
scheduledTime     : TimeRange
proposedTimeSlots : TimeRange[]
requester         : UserProfile
handledBy         : ServiceProvider
trackedJourney    : WasteJourney
requestedDate     : Date
quantity          : Integer
categories        : ProductCategory[]
cancelledBy       : UserProfile
cancelledDate     : Date
+submitRequest() : ValidationResult //UC6 //action: submit service request
+acceptRequest(serviceProvider : ServiceProvider) : void //UC8 //UC9 //action: accept service request
+scheduleRequest(timeSlot : TimeRange) : void //UC8 //UC9 //action: schedule service request
+completeRequest() : void //UC8 //UC9 //action: complete service request
+cancelRequest(cancelledBy : UserProfile) : void //UC12 //action: cancel service request
+getRequestDetails() : ServiceRequestDetails //UC11 //action: get service request details
+isEligibleForCancellation() : Boolean //UC12 //action: check if request is eligible for cancellation
}
class CollectionRequest extends ServiceRequest {
vehicleType : VehicleType
location    : Address
+validateCollectionDetails() : ValidationResult //UC6 //action: validate collection request details
}
class TransportRequest extends ServiceRequest {
routePlan : RoutePlan
+validateTransportDetails() : ValidationResult //UC6 //action: validate transport request details
}
class ServiceRequestDetails {
payload : Map
+getDetail(key : String) : Object //UC11 //action: get specific detail by key
}
ServiceRequest ..> ServiceRequestDetails : uses >
class RoutePlan {
waypoints : Coordinates[]
+addWaypoint(coordinate : Coordinates) : void //UC9 //action: add waypoint to route plan
+optimizeRoute() : void //UC9 //action: optimize route based on waypoints
+isValid() : Boolean //UC9 //action: validate route plan
}
ServiceProvider "1" --> "*" ServiceRequest : handles >
TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {
journeyId       : UUID
trackingCode    : String
stages          : Stage[]
status          : TrackingStatus
currentLocation : Address
+initializeJourney() : void //UC10 //action: initialize waste journey
+addStage(stage : Stage) : void //UC10 //action: add stage to journey
+updateCurrentLocation(location : Address) : void //UC10 //action: update current location
+getJourneyStatus() : TrackingStatus //UC10 //action: get journey status
+generateTrackingCode() : String //UC10 //action: generate unique tracking code
+completeJourney() : void //UC10 //action: mark journey as completed
+cancelJourney() : void //UC10 //action: cancel journey
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {
productId           : UUID
name                : String
description         : String
category            : ProductCategory
inventory           : Integer
listingStatus       : ListingStatus
listedDate          : Date
lastUpdatedDate     : Date
sustainabilityScore : Float
+createListing() : ValidationResult //UC5 //action: create product listing
+updateListing() : ValidationResult //UC13 //action: update product listing
+validateListing() : ValidationResult //UC5 //action: validate listing data
+publishListing() : void //UC5 //action: publish product listing
+archiveListing() : void //UC13 //action: archive product listing
+calculateSustainabilityScore() : Float //UC5 //action: calculate sustainability score
}
class SearchFilter {
categories  : ProductCategory[]
location    : Address
maxDistance : Float
keywords    : String
+addCategory(category : ProductCategory) : void //UC14 //action: add category to filter
+setMaxDistance(distance : Float) : void //UC14 //action: set maximum distance
+addKeyword(keyword : String) : void //UC14 //action: add keyword to filter
+matches(product : Product) : Boolean //UC14 //action: check if product matches filter criteria
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {
pointId        : UUID
name           : String
type           : PointType
position       : Coordinates
operatingHours : OpeningHours[]
+addOperatingHours(hours : OpeningHours) : ValidationResult //UC20 //action: add operating hours
+removeOperatingHours(dayOfWeek : DayOfWeek) : void //UC20 //action: remove operating hours
+isOpenAt(timeRange : TimeRange, dayOfWeek : DayOfWeek) : Boolean //UC22 //action: check if point is open at specified time
+validateOperatingHours() : ValidationResult //UC20 //action: validate operating hours for consistency
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {
templateId : String
channel    : NotificationChannel
content    : String
+getFormattedContent(data : Map) : String //UC1 //action: format template content with data
}
class NotificationService {
+sendNotification(recipient : UserProfile, type : NotificationType, data : Map) : void //UC1 //action: send notification to user
+sendProviderAlert(provider : ServiceProvider, type : NotificationType, data : Map) : void //UC8 //UC9 //action: send alert to service provider
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml