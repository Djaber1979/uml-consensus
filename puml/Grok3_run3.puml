@startuml
left to right direction

' ──────────────────────────────────────────────
' CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
  enum VerificationStatus {
    VERIFIED
    UNVERIFIED
  }
  enum VehicleType {
    TRUCK
    VAN
    CARGO_BIKE
    BICYCLE
    MOTORCYCLE
    COMPACTOR
    ELECTRIC_VAN
    CARGO_VAN
  }
  enum DayOfWeek {
    MON
    TUE
    WED
    THU
    FRI
    SAT
    SUN
  }
  class ValidationResult {
    valid    : Boolean
    messages : String[]
  }
  class Coordinates {
    latitude  : Float
    longitude : Float
  }
  class Address {
    street           : String
    city             : String
    zipCode          : String
    country          : String
    position         : Coordinates
    validationStatus : VerificationStatus
  }
  class TimeRange {
    start : LocalTime
    end   : LocalTime
  }
  class OpeningHours {
    dayOfWeek : DayOfWeek
    timeRange : TimeRange
  }
  Address *-- Coordinates
  OpeningHours -- TimeRange
}

' ──────────────────────────────────────────────
' USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
  enum UserRole {
    USER
    SERVICE_PROVIDER
    PLATFORM_MANAGER
  }
  enum AccountStatus {
    ACTIVE
    DEACTIVATED
    SUSPENDED
    LOCKED
  }
  class UserAccount {
    id               : UUID
    registrationDate : Date
    accountStatus    : AccountStatus
    + registerUser(name: String, email: String, password: String, address: Address): ValidationResult // UC1: Create user account
    + verifyEmail(token: String): ValidationResult // UC1: Verify email
    + login(email: String, password: String): ValidationResult // UC2: Authenticate user
    + resetPassword(email: String): ValidationResult // UC3: Send password reset link
    + confirmPasswordReset(token: String, newPassword: String): ValidationResult // UC3: Update password
    + updateProfile(name: String, phoneNumber: String, address: Address): ValidationResult // UC4: Update user profile
    + deactivateAccount(reason: String): ValidationResult // UC15: Deactivate account
    + logout(): void // UC16: Terminate session
  }
  class UserProfile {
    name                  : String
    email                 : String
    phoneNumber           : String
    address               : Address
    role                  : UserRole
    lastUpdatedDate       : Date
    accountLockedDate     : Date
    emailVerifiedDate     : Date
    emailValidationStatus : VerificationStatus
    deactivationReason    : String
  }
  class UserCredentials {
    encryptedPassword   : String
    lastPasswordReset   : Date
    failedLoginAttempts : Integer
    lastLoginDate       : Date
    passwordResetToken  : String
    tokenExpirationDate : Date
    email               : String
  }
  class ServiceProvider {
    providerId  : UUID
    companyName : String
    profile     : UserProfile
    + updateProfile(companyName: String, serviceAreas: Address[], vehicleTypes: VehicleType[], availability: TimeRange[]): ValidationResult // UC19: Update provider profile
  }
  class "RoleManager <<service>>" as RoleManager {
    + assignRole(userId: UUID, newRole: UserRole): ValidationResult // UC21: Assign or update user role
  }
  UserAccount ..> ValidationResult
  UserProfile ..> ValidationResult
  UserCredentials ..> ValidationResult
  RoleManager ..> ValidationResult
  UserAccount "1" --> "1" UserProfile : has >
  UserAccount "1" --> "1" UserCredentials : authenticates >
  UserAccount --> RoleManager : uses >
  UserAccount "1" -- "0..1" ServiceProvider : may act as >
}

' ──────────────────────────────────────────────
' SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
  enum RequestType {
    COLLECTION
    TRANSPORT
  }
  enum RequestStatus {
    PENDING
    SCHEDULED
    COMPLETED
    CANCELLED
  }
  abstract class ServiceRequest {
    id                : UUID
    requestType       : RequestType
    status            : RequestStatus
    createdDate       : Date
    scheduledTime     : TimeRange
    proposedTimeSlots : TimeRange[]
    requester         : UserProfile
    handledBy         : ServiceProvider
    trackedJourney    : WasteJourney
    requestedDate     : Date
    quantity          : Integer
    categories        : ProductCategory[]
    cancelledBy       : UserProfile
    cancelledDate     : Date
    + createRequest(requester: UserProfile, requestType: RequestType, details: Map<String, Object>): ValidationResult // UC6, UC8, UC9: Create service request
    + cancelRequest(cancelledBy: UserProfile): ValidationResult // UC12: Cancel request
    + updateStatus(newStatus: RequestStatus): ValidationResult // UC8, UC9, UC11: Update request status
  }
  class CollectionRequest extends ServiceRequest {
    vehicleType : VehicleType
    location    : Address
    + scheduleCollection(provider: ServiceProvider, scheduledTime: TimeRange): ValidationResult // UC8: Schedule collection
    + confirmCollection(): ValidationResult // UC8: Confirm collection completion
  }
  class TransportRequest extends ServiceRequest {
    routePlan : RoutePlan
    + scheduleTransport(provider: ServiceProvider, scheduledTime: TimeRange, routePlan: RoutePlan): ValidationResult // UC9: Schedule transport
    + confirmTransport(): ValidationResult // UC9: Confirm transport completion
  }
  class RoutePlan {
    waypoints : Coordinates[]
  }
  ServiceProvider "1" --> "*" ServiceRequest : handles >
  TransportRequest -- RoutePlan
  ServiceRequest --> WasteJourney : tracked by >
  ServiceRequest --> UserProfile : requester >
  ServiceRequest --> ServiceProvider : handled by >
}

' ──────────────────────────────────────────────
' WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
  enum TrackingStatus {
    IN_PROGRESS
    COMPLETED
    CANCELLED
  }
  enum Stage {
    COLLECTED
    IN_TRANSIT
    PROCESSED
    RECYCLED
  }
  class WasteJourney {
    journeyId       : UUID
    trackingCode    : String
    stages          : Stage[]
    status          : TrackingStatus
    currentLocation : Address
    + trackJourney(trackingCode: String): WasteJourney // UC10: Retrieve journey details
    + updateStage(newStage: Stage, location: Address): ValidationResult // UC10: Update journey stage
  }
  WasteJourney ..> ValidationResult
}

' ──────────────────────────────────────────────
' PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
  enum ProductCategory {
    RECYCLABLE_PLASTIC
    ELECTRONIC_WASTE
    ORGANIC_MATERIAL
    METAL
    GLASS
    TEXTILES
    PAPER
  }
  enum ListingStatus {
    DRAFT
    PENDING_APPROVAL
    PUBLISHED
    REJECTED
    ARCHIVED
  }
  class Product {
    productId           : UUID
    name                : String
    description         : String
    category            : ProductCategory
    inventory           : Integer
    listingStatus       : ListingStatus
    listedDate          : Date
    lastUpdatedDate     : Date
    sustainabilityScore : Float
    + listProduct(name: String, description: String, category: ProductCategory, inventory: Integer): ValidationResult // UC5: Create product listing
    + updateProduct(name: String, description: String, category: ProductCategory, inventory: Integer): ValidationResult // UC13: Update product listing
    + publishListing(): ValidationResult // UC5: Publish product listing
    + searchProducts(filter: SearchFilter): Product[] // UC14: Search product listings
  }
  class SearchFilter {
    categories  : ProductCategory[]
    location    : Address
    maxDistance : Float
    keywords    : String
  }
  Product ..> ValidationResult
  SearchFilter ..> ValidationResult
  Product "1" --> "*" CollectionPoint : available at >
  Product "1" --> "1" UserProfile : requester >
  SearchFilter --> "*" Product : filters >
}

' ──────────────────────────────────────────────
' LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
  enum PointType {
    COLLECTION_CENTER
    RECYCLING_PLANT
    REUSE_STORE
  }
  class CollectionPoint {
    pointId        : UUID
    name           : String
    type           : PointType
    position       : Coordinates
    operatingHours : OpeningHours[]
    + addCollectionPoint(name: String, type: PointType, position: Coordinates, operatingHours: OpeningHours[], address: Address): ValidationResult // UC20: Add collection point
    + updateCollectionPoint(name: String, type: PointType, position: Coordinates, operatingHours: OpeningHours[], address: Address): ValidationResult // UC20: Update collection point
    + deactivateCollectionPoint(): ValidationResult // UC20: Deactivate collection point
    + viewCollectionPoints(): CollectionPoint[] // UC22: Retrieve collection points
  }
  CollectionPoint ..> ValidationResult
  CollectionPoint *-- Coordinates
  CollectionPoint *-- OpeningHours
  CollectionPoint -- Address : located at >
  ServiceProvider "1" --> "*" CollectionPoint : operates at >
}

' ──────────────────────────────────────────────
' NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
  enum NotificationType {
    REGISTRATION_SUCCESS
    NEW_REQUEST
    DISPATCH_ALERT
    PASSWORD_RESET
    PASSWORD_RESET_CONFIRM
    REQUEST_ACCEPTED
    ACCOUNT_DEACTIVATION
  }
  enum NotificationChannel {
    EMAIL
    SMS
    PUSH
  }
  class NotificationTemplate {
    templateId : String
    channel    : NotificationChannel
    content    : String
  }
  class NotificationService {
    + sendNotification(user: UserProfile, type: NotificationType, channel: NotificationChannel): ValidationResult // UC1–UC22: Send notifications for various events
  }
  NotificationService ..> NotificationTemplate
  NotificationService --> UserProfile : notifies >
  NotificationService --> ServiceProvider : alerts >
}

@enduml