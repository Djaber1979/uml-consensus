@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {

valid    : Boolean

messages : String[]
}
class Coordinates {

latitude  : Float

longitude : Float
  
  + distanceTo(other: Coordinates): Float // UC14 // action: compute distance between two points
}
class Address {

street           : String

city             : String

zipCode          : String

country          : String

position         : Coordinates

validationStatus : VerificationStatus
}
class TimeRange {

start : LocalTime

end   : LocalTime
}
class OpeningHours {

dayOfWeek : DayOfWeek

timeRange : TimeRange
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {

id               : UUID

registrationDate : Date

accountStatus    : AccountStatus
  
  + authenticate(password: String): Boolean // UC2 // action: verify credentials & role access
  + deactivate(reason: String): void // UC15 // action: soft-deactivate user account
  + initiatePasswordReset(): void // UC3 // action: generate reset token & timestamp
  + lockAccount(reason: String): void // UC2 // action: lock after max failed attempts
  + register(profile: UserProfile, credentials: UserCredentials): ValidationResult // UC1 // action: create account with unverified email
  + verifyEmail(verificationCode: String): ValidationResult // UC1 // action: mark email verified & activate
}
class UserProfile {

name                  : String

email                 : String

phoneNumber           : String

address               : Address

role                  : UserRole

lastUpdatedDate       : Date

accountLockedDate     : Date

emailVerifiedDate     : Date

emailValidationStatus : VerificationStatus

deactivationReason    : String
  
  + isEmailVerified(): Boolean // UC2 // action: check email verification status
  + updateDetails(updatedData: Map): ValidationResult // UC4 // action: apply profile changes & timestamp
  + validateBasicInfo(): ValidationResult // UC1 // action: validate profile registration data
}
class UserCredentials {

encryptedPassword   : String

lastPasswordReset   : Date

failedLoginAttempts : Integer

lastLoginDate       : Date

passwordResetToken  : String

tokenExpirationDate : Date

email               : String
  
  + authenticate(password: String): Boolean // UC2 // action: verify password hash
  + incrementFailedLogin(): void // UC2 // action: track failed attempts
  + recordSuccessfulLogin(date: Date): void // UC2 // action: timestamp successful login
  + resetPassword(token: String, newPassword: String): ValidationResult // UC3 // action: change password via valid token
  + validatePasswordStrength(password: String): ValidationResult // UC1 // action: enforce password policy
}
class ServiceProvider {

providerId  : UUID

companyName : String

profile     : UserProfile
  
  + acceptCollectionRequest(request: CollectionRequest, scheduledTime: TimeRange): void // UC8 // action: accept & schedule collection
  + acceptTransportRequest(request: TransportRequest, scheduledTime: TimeRange): void // UC9 // action: accept & schedule transport
  + checkAvailability(request: ServiceRequest, timeSlot: TimeRange): Boolean // UC8 // action: verify capacity for given slot
  + updateProfile(updateData: Map): ValidationResult // UC19 // action: update provider profile data
}
class "RoleManager <<service>>" as RoleManager {
  
  + approveServiceProvider(provider: ServiceProvider): void // UC18 // action: activate provider profile
  + deactivateServiceProvider(provider: ServiceProvider): void // UC18 // action: deactivate provider profile
  + setUserRole(account: UserAccount, newRole: UserRole): ValidationResult // UC21 // action: assign / update user role
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {

id                : UUID

requestType       : RequestType

status            : RequestStatus

createdDate       : Date

scheduledTime     : TimeRange

proposedTimeSlots : TimeRange[]

requester         : UserProfile

handledBy         : ServiceProvider

trackedJourney    : WasteJourney

requestedDate     : Date

quantity          : Integer

categories        : ProductCategory[]

cancelledBy       : UserProfile

cancelledDate     : Date
  
  + accept(provider: ServiceProvider, scheduled: TimeRange): void // UC8 // action: accept request & schedule
  + assignProvider(provider: ServiceProvider): void // UC6 // action: set handling provider
  + cancel(requester: UserProfile, reason: String): void // UC12 // action: cancel pending request
  + markCompleted(): void // UC8 // action: mark request status COMPLETED
  + reject(reason: String): void // UC8 // action: decline request
  + schedule(time: TimeRange): void // UC6 // action: set scheduled time & status
}
class CollectionRequest extends ServiceRequest {

vehicleType : VehicleType

location    : Address
  
  + markCollected(): void // UC8 // action: update status when waste collected
}
class TransportRequest extends ServiceRequest {

routePlan : RoutePlan
  
  + markDelivered(): void // UC9 // action: mark transport completed
  + planRoute(plan: RoutePlan): void // UC9 // action: assign route plan
}

class RoutePlan {

waypoints : Coordinates[]
}
ServiceProvider "1" --> "*" ServiceRequest : handles >

TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {

journeyId       : UUID

trackingCode    : String

stages          : Stage[]

status          : TrackingStatus

currentLocation : Address
  
  + getCurrentStatus(): TrackingStatus // UC10 // action: retrieve journey status
  + updateStage(stage: Stage, location: Address): void // UC10 // action: add stage & update location
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {

productId           : UUID

name                : String

description         : String

category            : ProductCategory

inventory           : Integer

listingStatus       : ListingStatus

listedDate          : Date

lastUpdatedDate     : Date

sustainabilityScore : Float
  
  + publish(): void // UC5 // action: set listingStatus to PUBLISHED
  + updateListing(updatedData: Map): ValidationResult // UC13 // action: modify product details
  + validateListing(): ValidationResult // UC5 // action: ensure product data integrity
}
class SearchFilter {

categories  : ProductCategory[]

location    : Address

maxDistance : Float

keywords    : String
  
  + apply(products: Product): Product // UC14 // action: filter products by criteria
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {

pointId        : UUID

name           : String

type           : PointType

position       : Coordinates

operatingHours : OpeningHours[]
  
  + deactivate(): void // UC20 // action: deactivate collection point
  + updateDetails(updated: Map): ValidationResult // UC20 // action: edit location info
  + validateLocation(): ValidationResult // UC20 // action: validate address & hours
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {

templateId : String

channel    : NotificationChannel

content    : String
}
class NotificationService {
  
  + sendAccountDeactivation(user: UserProfile): void // UC15 // action: confirm account deactivation
  + sendPasswordResetConfirmation(user: UserProfile): void // UC3 // action: confirm password reset
  + sendPasswordResetLink(user: UserProfile, link: String): void // UC3 // action: password reset email
  + sendRegistrationSuccess(user: UserProfile): void // UC1 // action: confirm successful registration
  + sendRequestAccepted(user: UserProfile, request: ServiceRequest): void // UC8 // action: notify request acceptance
  + sendVerificationEmail(user: UserProfile, link: String): void // UC1 // action: email verification link
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml
