@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {

valid    : Boolean

messages : String[]
}
class Coordinates {

latitude  : Float

longitude : Float
}
class Address {

street           : String

city             : String

zipCode          : String

country          : String

position         : Coordinates

validationStatus : VerificationStatus
--
+ updateAddressDetails(street: String, city: String, zipCode: String, country: String, coordinates: Coordinates): ValidationResult //UC4 //action: Updates address details.
+ validateAddress(): ValidationResult //UC4 //action: Validates the address components and coordinates.
+ markAsVerified() //action: Marks address as verified.
+ markAsUnverified() //action: Marks address as unverified.
}
class TimeRange {

start : LocalTime

end   : LocalTime
--
+ isValid(): Boolean //UC20 //action: Validates if the time range is logical (e.g. start < end).
}
class OpeningHours {

dayOfWeek : DayOfWeek

timeRange : TimeRange
--
+ isValid(): Boolean //UC20 //action: Validates if the opening hours entry is logical.
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {

id               : UUID

registrationDate : Date

accountStatus    : AccountStatus
--
+ createAccount(id: UUID, registrationDate: Date): UserAccount //UC1 //action: Creates a new user account with ACTIVE status.
+ lockAccount() //UC2 //action: Locks the user account due to excessive failed login attempts.
+ deactivateAccount() //UC15 //action: Deactivates the user account.
+ suspendAccount() //UC18 //action: Suspends a user account.
+ reactivateAccount() //UC18 //action: Reactivates a previously suspended/deactivated account.
+ canLogin(): Boolean //UC2 //action: Checks if account status allows login (e.g. ACTIVE).
}
class UserProfile {

name                  : String

email                 : String

phoneNumber           : String

address               : Address

role                  : UserRole

lastUpdatedDate       : Date

accountLockedDate     : Date

emailVerifiedDate     : Date

emailValidationStatus : VerificationStatus

deactivationReason    : String
--
+ createProfile(name: String, email: String, phoneNumber: String, address: Address, role: UserRole): UserProfile //UC1 //action: Creates a user profile with initial email unverified status.
+ validateEmailFormat(email: String): ValidationResult //UC1 //action: Validates the format of the provided email.
+ initiateEmailVerification() //UC1 //action: Sets email to UNVERIFIED and prepares for verification.
+ markEmailAsVerified() //UC1 //action: Marks the user's email as verified and records verification date.
+ isEmailVerified(): Boolean //UC2 //action: Checks if the user's email is verified.
+ getRole(): UserRole //UC2 //action: Returns the user's role.
+ updateProfile(name: String, phoneNumber: String, address: Address): ValidationResult //UC4 //action: Updates user's profile information and records last update date.
+ validateProfileData(name: String, phoneNumber: String, address: Address): ValidationResult //UC4 //action: Validates the integrity and format of profile data.
+ changeEmail(newEmail: String): ValidationResult //UC4 //action: Changes user's email, sets email status to unverified, and prepares for re-verification.
+ recordDeactivationReason(reason: String) //UC15 //action: Records the reason for account deactivation.
# setRole(newRole: UserRole) //UC21 //action: Sets the user's role (called by RoleManager).
}
class UserCredentials {

encryptedPassword   : String

lastPasswordReset   : Date

failedLoginAttempts : Integer

lastLoginDate       : Date

passwordResetToken  : String

tokenExpirationDate : Date

email               : String
--
+ createCredentials(email: String, encryptedPassword: String): UserCredentials //UC1 //action: Creates user credentials.
+ validatePasswordStrength(password: String): ValidationResult //UC1 //action: Validates the strength of the provided password.
+ authenticate(email: String, passwordToVerify: String): Boolean //UC2 //action: Verifies user's email and password.
+ recordSuccessfulLogin() //UC2 //action: Updates last login date and resets failed login attempts.
+ recordFailedLoginAttempt(): Integer //UC2 //action: Increments failed login attempts and returns current count.
+ hasExceededFailedLoginAttempts(): Boolean //UC2 //action: Checks if failed login attempts threshold is met.
+ initiatePasswordReset(): String //UC3 //action: Generates and stores a password reset token and its expiration for the credential's email. Returns token.
+ resetPassword(token: String, newEncryptedPassword: String): ValidationResult //UC3 //action: Resets the password if the token is valid and not expired.
+ isPasswordResetTokenValid(token: String): Boolean //UC3 //action: Validates the password reset token (exists, not expired).
# getEmail(): String //UC2 //action: Returns the email associated with these credentials.
}
class ServiceProvider {

providerId  : UUID

companyName : String

profile     : UserProfile
--
+ createProviderProfile(providerId: UUID, companyName: String, userProfile: UserProfile): ServiceProvider //UC18 //action: Creates a service provider profile and links it to a user account's profile.
+ updateProviderDetails(companyName: String) //UC18, UC19 //action: Updates service provider specific details like company name.
}
class "RoleManager <<service>>" as RoleManager {
--
+ assignRole(userProfile: UserProfile, newRole: UserRole): ValidationResult //UC21 //action: Assigns a new role to the user after validation.
+ validateRoleTransition(userProfile: UserProfile, newRole: UserRole): ValidationResult //UC21 //action: Validates if the proposed role transition is allowed.
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {

id                : UUID

requestType       : RequestType

status            : RequestStatus

createdDate       : Date

scheduledTime     : TimeRange

proposedTimeSlots : TimeRange[]

requester         : UserProfile

handledBy         : ServiceProvider

trackedJourney    : WasteJourney

requestedDate     : Date

quantity          : Integer

categories        : ProductCategory[]

cancelledBy       : UserProfile

cancelledDate     : Date
--
+ acceptRequest(provider: ServiceProvider, scheduledTime: TimeRange) //UC8, UC9 //action: Accepts the service request, assigns provider and schedules it.
+ proposeAlternativeTimeSlots(slots: TimeRange[]) //UC8, UC9 //action: Proposes alternative time slots for the request.
+ completeRequest() //UC8, UC9 //action: Marks the service request as completed.
+ declineRequest(cancellingEntityProfile: UserProfile) //UC8, UC9 //action: Declines the service request (by provider or system).
+ assignWasteJourney(journey: WasteJourney) //UC8, UC9 //action: Associates a waste journey with the service request.
+ getStatus(): RequestStatus //UC11 //action: Returns the current status of the service request.
+ canBeCancelledByUser(): Boolean //UC12 //action: Checks if the request is in a state that allows user cancellation.
+ cancelByUser(cancellingUser: UserProfile) //UC12 //action: Cancels the service request by the user if allowed.
}
class CollectionRequest extends ServiceRequest {

vehicleType : VehicleType

location    : Address
--
+ createCollectionRequest(id: UUID, requester: UserProfile, requestedDate: Date, quantity: Integer, categories: ProductCategory[], vehicleType: VehicleType, location: Address): CollectionRequest //UC6 //action: Creates a new collection request with PENDING status.
}
class TransportRequest extends ServiceRequest {

routePlan : RoutePlan
--
+ createTransportRequest(id: UUID, requester: UserProfile, requestedDate: Date, quantity: Integer, categories: ProductCategory[], routePlan: RoutePlan): TransportRequest //UC6 //action: Creates a new transport request with PENDING status.
+ updateRoutePlan(routePlan: RoutePlan) //UC9 //action: Updates or sets the route plan for the transport.
}

class RoutePlan {

waypoints : Coordinates[]
}
ServiceProvider "1" --> "*" ServiceRequest : handles >

TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {

journeyId       : UUID

trackingCode    : String

stages          : Stage[]

status          : TrackingStatus

currentLocation : Address
--
+ startJourney(journeyId: UUID, trackingCode: String, initialLocation: Address): WasteJourney //UC8, UC9 //action: Creates and starts a new waste journey.
+ getTrackingDetails(): Map<String, Object> //UC10 //action: Returns current status, location, and stages.
+ updateJourneyStage(newStage: Stage, newLocation: Address) //UC10 //action: Updates the stage and current location of the waste journey.
+ completeJourney() //UC10 //action: Marks the waste journey as completed.
+ cancelJourney() //UC10 //action: Marks the waste journey as cancelled.
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {

productId           : UUID

name                : String

description         : String

category            : ProductCategory

inventory           : Integer

listingStatus       : ListingStatus

listedDate          : Date

lastUpdatedDate     : Date

sustainabilityScore : Float
--
+ createAndPublishListing(productId: UUID, name: String, description: String, category: ProductCategory, inventory: Integer, requester: UserProfile): Product //UC5 //action: Creates and publishes a new product listing if details are valid.
+ createListing(productId: UUID, name: String, description: String, category: ProductCategory, inventory: Integer, requester: UserProfile): Product //UC5 //action: Creates a new product listing with PENDING_APPROVAL status.
+ validateDetails(): ValidationResult //UC5, UC13 //action: Validates the product's details.
+ publishListing() //UC5 //action: Sets the product listing status to PUBLISHED.
+ updateDetails(name: String, description: String, category: ProductCategory, inventory: Integer): ValidationResult //UC13 //action: Updates the product's details and last updated date.
+ approveListing() //UC17 //action: Approves a product listing, changing status to PUBLISHED.
+ rejectListing() //UC17 //action: Rejects a product listing, changing status to REJECTED.
+ archiveListing() //UC17 //action: Archives a product listing.
}
class SearchFilter {

categories  : ProductCategory[]

location    : Address

maxDistance : Float

keywords    : String
--
+ createSearchFilter(categories: ProductCategory[], location: Address, maxDistance: Float, keywords: String): SearchFilter //UC14 //action: Creates a search filter instance.
+ apply(products: Product[]): Product[] //UC14 //action: Filters a list of products based on the filter's criteria.
+ isValid(): ValidationResult //UC14 //action: Validates the search filter criteria.
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {

pointId        : UUID

name           : String

type           : PointType

position       : Coordinates

operatingHours : OpeningHours[]
--
+ createCollectionPoint(pointId: UUID, name: String, type: PointType, address: Address, position: Coordinates, operatingHours: OpeningHours[], operatedBy: ServiceProvider): CollectionPoint //UC20 //action: Creates a new collection point.
+ updateDetails(name: String, type: PointType, address: Address, position: Coordinates): ValidationResult //UC20 //action: Updates the core details of a collection point.
+ updateOperatingHours(newHours: OpeningHours[]) //UC19, UC20 //action: Updates the operating hours for the collection point.
+ validatePointData(): ValidationResult //UC20 //action: Validates collection point data including address and operating hours.
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {

templateId : String

channel    : NotificationChannel

content    : String
}
class NotificationService {
--
+ sendEmailVerificationNotification(userProfile: UserProfile, verificationLink: String) //UC1 //action: Sends an email verification notification to the user.
+ sendPasswordResetNotification(userProfile: UserProfile, resetLink: String) //UC3 //action: Sends a password reset link to the user.
+ sendPasswordResetConfirmationNotification(userProfile: UserProfile) //UC3 //action: Confirms successful password reset to the user.
+ sendServiceRequestAcceptedNotification(userProfile: UserProfile, serviceRequest: ServiceRequest) //UC8, UC9 //action: Notifies user that their service request has been accepted and scheduled.
+ sendAccountDeactivationNotification(userProfile: UserProfile) //UC15 //action: Sends account deactivation confirmation to the user.
+ sendProviderProfileUpdateNotification(serviceProvider: ServiceProvider) //UC18 //action: Notifies service provider of changes to their profile by platform manager.
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml