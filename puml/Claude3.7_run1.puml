@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {
valid    : Boolean
messages : String[]
+ isValid() : Boolean //UC1, UC2, UC3, UC4 //action: determine validation status
+ addErrorMessage(message: String) : void //UC1, UC4 //action: record validation error
}
class Coordinates {
latitude  : Float
longitude : Float
+ calculateDistance(otherCoordinates: Coordinates) : Float //UC14 //action: measure distance between locations
}
class Address {
street           : String
city             : String
zipCode          : String
country          : String
position         : Coordinates
validationStatus : VerificationStatus
+ verify() : void //UC1 //action: mark address as verified
+ validateFormat() : ValidationResult //UC1, UC4 //action: validate address format
}
class TimeRange {
start : LocalTime
end   : LocalTime
+ overlaps(otherTimeRange: TimeRange) : Boolean //UC19 //action: check if time ranges overlap
+ isWithinBusinessHours() : Boolean //UC20 //action: verify time range is valid
}
class OpeningHours {
dayOfWeek : DayOfWeek
timeRange : TimeRange
+ isOpen(dayOfWeek: DayOfWeek, time: LocalTime) : Boolean //UC22 //action: check if point is open at specific time
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {
id               : UUID
registrationDate : Date
accountStatus    : AccountStatus
+ createAccount(profile: UserProfile, credentials: UserCredentials) : UserAccount //UC1 //action: create new user account
+ activateAccount() : void //UC1 //action: activate user account after email verification
+ deactivateAccount(reason: String) : void //UC15 //action: soft-deactivate user account
+ suspendAccount() : void //UC18 //action: suspend service provider account
+ unlockAccount() : void //UC2 //action: unlock a previously locked account
}
class UserProfile {
name                  : String
email                 : String
phoneNumber           : String
address               : Address
role                  : UserRole
lastUpdatedDate       : Date
accountLockedDate     : Date
emailVerifiedDate     : Date
emailValidationStatus : VerificationStatus
deactivationReason    : String
+ verifyEmail() : void //UC1 //action: mark email as verified
+ updateProfile(name: String, phoneNumber: String, address: Address) : ValidationResult //UC4 //action: update profile information
+ validateEmail() : ValidationResult //UC1 //action: validate email format
}
class UserCredentials {
encryptedPassword   : String
lastPasswordReset   : Date
failedLoginAttempts : Integer
lastLoginDate       : Date
passwordResetToken  : String
tokenExpirationDate : Date
email               : String
+ validateCredentials(email: String, password: String) : ValidationResult //UC2 //action: validate login credentials
+ incrementFailedAttempts() : void //UC2 //action: increment number of failed login attempts
+ resetFailedAttempts() : void //UC2 //action: reset failed login counter after successful login
+ updateLastLoginDate() : void //UC2 //action: record login timestamp
+ generatePasswordResetToken() : String //UC3 //action: generate password reset token
+ validatePasswordResetToken(token: String) : Boolean //UC3 //action: validate reset token validity
+ updatePassword(newPassword: String) : ValidationResult //UC3 //action: update user password
+ validatePasswordStrength(password: String) : ValidationResult //UC1, UC3 //action: validate password complexity rules
+ isTokenExpired() : Boolean //UC3 //action: check if password reset token is expired
}
class ServiceProvider {
providerId  : UUID
companyName : String
profile     : UserProfile
+ updateServiceProviderProfile(companyName: String) : ValidationResult //UC19 //action: update service provider profile
}
class "RoleManager <<service>>" as RoleManager {
+ assignRole(userAccount: UserAccount, newRole: UserRole) : ValidationResult //UC21 //action: assign new role to user
+ validateRoleChange(currentRole: UserRole, newRole: UserRole) : ValidationResult //UC21 //action: validate role change is allowed
+ promoteToServiceProvider(userAccount: UserAccount) : ServiceProvider //UC21 //action: promote user to service provider
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {
id                : UUID
requestType       : RequestType
status            : RequestStatus
createdDate       : Date
scheduledTime     : TimeRange
proposedTimeSlots : TimeRange[]
requester         : UserProfile
handledBy         : ServiceProvider
trackedJourney    : WasteJourney
requestedDate     : Date
quantity          : Integer
categories        : ProductCategory[]
cancelledBy       : UserProfile
cancelledDate     : Date
+ createRequest(requester: UserProfile) : ServiceRequest //UC6 //action: create service request
+ validateRequest() : ValidationResult //UC6 //action: validate request details
+ cancelRequest(cancelledBy: UserProfile) : void //UC12 //action: cancel service request
+ acceptRequest(provider: ServiceProvider) : void //UC8, UC9 //action: accept service request
+ completeRequest() : void //UC8, UC9 //action: mark request as completed
+ scheduleRequest(timeSlot: TimeRange) : void //UC8, UC9 //action: schedule request for specific time
+ assignProvider(provider: ServiceProvider) : void //UC8, UC9 //action: assign service provider to request
}
class CollectionRequest extends ServiceRequest {
vehicleType : VehicleType
location    : Address
+ createCollectionRequest(location: Address, vehicleType: VehicleType) : CollectionRequest //UC6 //action: create collection-specific request
}
class TransportRequest extends ServiceRequest {
routePlan : RoutePlan
+ createTransportRequest(routePlan: RoutePlan) : TransportRequest //UC6 //action: create transport-specific request
+ validateRoutePlan() : ValidationResult //UC9 //action: validate route plan feasibility
}
class ServiceRequestDetails {
payload : Map
+ addDetails(key: String, value: Object) : void //UC6 //action: add request-specific details
}
ServiceRequest ..> ServiceRequestDetails : uses >
class RoutePlan {
waypoints : Coordinates[]
+ calculateOptimalRoute() : void //UC9 //action: calculate optimal route between waypoints
+ estimateDistance() : Float //UC9 //action: estimate total route distance
+ addWaypoint(coordinate: Coordinates) : void //UC9 //action: add waypoint to route plan
}
ServiceProvider "1" --> "*" ServiceRequest : handles >
TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {
journeyId       : UUID
trackingCode    : String
stages          : Stage[]
status          : TrackingStatus
currentLocation : Address
+ createJourney() : WasteJourney //UC10 //action: create new waste journey
+ generateTrackingCode() : String //UC10 //action: generate unique tracking code
+ addStage(stage: Stage) : void //UC10 //action: add stage to journey
+ updateCurrentLocation(location: Address) : void //UC10 //action: update waste current location
+ completeJourney() : void //UC10 //action: mark journey as completed
+ cancelJourney() : void //UC12 //action: cancel waste journey
+ findByTrackingCode(trackingCode: String) : WasteJourney //UC10 //action: find journey by tracking code
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {
productId           : UUID
name                : String
description         : String
category            : ProductCategory
inventory           : Integer
listingStatus       : ListingStatus
listedDate          : Date
lastUpdatedDate     : Date
sustainabilityScore : Float
+ createListing(name: String, description: String, category: ProductCategory, inventory: Integer) : Product //UC5 //action: create new product listing
+ validateListing() : ValidationResult //UC5, UC13 //action: validate product listing details
+ publishListing() : void //UC5 //action: publish product listing
+ updateListing(name: String, description: String, category: ProductCategory, inventory: Integer) : ValidationResult //UC13 //action: update existing product listing
+ calculateSustainabilityScore() : Float //UC5 //action: calculate product sustainability score
+ archiveListing() : void //UC13 //action: archive product listing
}
class SearchFilter {
categories  : ProductCategory[]
location    : Address
maxDistance : Float
keywords    : String
+ applyFilters(products: Product[]) : Product[] //UC14 //action: filter products by search criteria
+ addCategoryFilter(category: ProductCategory) : void //UC14 //action: add category to filter
+ setLocationFilter(location: Address, maxDistance: Float) : void //UC14 //action: set location-based filter
+ setKeywordFilter(keywords: String) : void //UC14 //action: set keyword filter
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {
pointId        : UUID
name           : String
type           : PointType
position       : Coordinates
operatingHours : OpeningHours[]
+ createCollectionPoint(name: String, type: PointType, position: Coordinates) : CollectionPoint //UC20 //action: create new collection point
+ validateCollectionPoint() : ValidationResult //UC20 //action: validate collection point details
+ addOperatingHours(openingHours: OpeningHours) : void //UC20 //action: add operating hours to collection point
+ isOpenNow() : Boolean //UC22 //action: check if collection point is currently open
+ findNearbyPoints(location: Coordinates, maxDistance: Float) : CollectionPoint[] //UC22 //action: find collection points near location
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {
templateId : String
channel    : NotificationChannel
content    : String
+ getTemplate(notificationType: NotificationType, channel: NotificationChannel) : NotificationTemplate //UC1, UC3, UC15 //action: get appropriate notification template
+ formatTemplate(params: Map) : String //UC1, UC3, UC15 //action: format template with parameters
}
class NotificationService {
+ sendEmailVerification(userProfile: UserProfile) : void //UC1 //action: send email verification
+ sendPasswordResetLink(userProfile: UserProfile, token: String) : void //UC3 //action: send password reset email
+ notifyRequestAccepted(serviceRequest: ServiceRequest) : void //UC8, UC9 //action: notify request acceptance
+ notifyAccountDeactivation(userProfile: UserProfile) : void //UC15 //action: notify account deactivation
+ notifyNewRequest(serviceProvider: ServiceProvider, serviceRequest: ServiceRequest) : void //UC6 //action: notify service provider of new request
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml