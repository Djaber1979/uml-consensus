@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {

valid    : Boolean

messages : String[]
}
class Coordinates {

latitude  : Float

longitude : Float
}
class Address {

street           : String

city             : String

zipCode          : String

country          : String

position         : Coordinates

validationStatus : VerificationStatus
}
class TimeRange {

start : LocalTime

end   : LocalTime
}
class OpeningHours {

dayOfWeek : DayOfWeek

timeRange : TimeRange
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {

id               : UUID

registrationDate : Date

accountStatus    : AccountStatus
.. Methods ..
+ deactivateAccount(reason: String) //UC15 //action: Set account status to DEACTIVATED and record reason.
+ lockAccount() //UC2 //action: Set account status to LOCKED and record lock date.
+ checkAccountStatus(): AccountStatus //UC2 //action: Get current account status.
}
class UserProfile {

name                  : String

email                 : String

phoneNumber           : String

address               : Address

role                  : UserRole

lastUpdatedDate       : Date

accountLockedDate     : Date

emailVerifiedDate     : Date

emailValidationStatus : VerificationStatus

deactivationReason    : String
.. Methods ..
+ verifyEmail() //UC1 //action: Mark email as verified and set verification date.
+ isEmailVerified(): Boolean //UC2 //action: Check if email is verified.
+ updateName(name: String) //UC4 //action: Update user's name and record update timestamp.
+ updatePhoneNumber(phone: String) //UC4 //action: Update user's phone number and record update timestamp.
+ updateAddress(address: Address) //UC4 //action: Update user's address and record update timestamp.
+ updateEmail(newEmail: String) //UC4 //action: Update user's email, mark as UNVERIFIED, and record update timestamp.
+ getRole(): UserRole //UC2 //action: Get the user's role.
}
class UserCredentials {

encryptedPassword   : String

lastPasswordReset   : Date

failedLoginAttempts : Integer

lastLoginDate       : Date

passwordResetToken  : String

tokenExpirationDate : Date

email               : String
.. Methods ..
+ validatePassword(password: String): Boolean //UC2 //action: Check if provided password matches stored hash.
+ recordSuccessfulLogin() //UC2 //action: Update last login date and reset failed attempts count.
+ recordFailedLoginAttempt() //UC2 //action: Increment failed login attempts counter.
+ getFailedLoginAttempts(): Integer //UC2 //action: Get current count of failed login attempts.
+ generatePasswordResetToken(): String //UC3 //action: Generate, store, and set expiration for a password reset token.
+ verifyPasswordResetToken(token: String): Boolean //UC3 //action: Check if the provided token is valid and not expired.
+ updatePassword(newEncryptedPassword: String) //UC3 //action: Update stored password hash and clear reset token/attempts.
}
class ServiceProvider {

providerId  : UUID

companyName : String

profile     : UserProfile
.. Methods ..
+ updateCompanyName(name: String) //UC19 //action: Update the service provider's company name.
+ deactivateProviderAccount() //UC18 //action: Deactivate the service provider account (potentially linked UserAccount).
}
class "RoleManager <<service>>" as RoleManager {
.. Methods ..
+ assignRole(userProfile: UserProfile, newRole: UserRole): ValidationResult //UC21 //action: Validate and change the role of a user.
+ designateAsServiceProvider(account: UserAccount, companyName: String): ServiceProvider //UC21 //action: Assign service provider role and create associated ServiceProvider entity.
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {

id                : UUID

requestType       : RequestType

status            : RequestStatus

createdDate       : Date

scheduledTime     : TimeRange

proposedTimeSlots : TimeRange[]

requester         : UserProfile

handledBy         : ServiceProvider

trackedJourney    : WasteJourney

requestedDate     : Date

quantity          : Integer

categories        : ProductCategory[]

cancelledBy       : UserProfile

cancelledDate     : Date
.. Methods ..
+ acceptRequest(provider: ServiceProvider) //UC8, UC9 //action: Assign provider and set status to SCHEDULED.
+ schedule(time: TimeRange) //UC8, UC9 //action: Set the scheduled time for the request.
+ markAsCompleted() //UC8, UC9 //action: Set request status to COMPLETED.
+ cancelRequest(canceller: UserProfile) //UC12 //action: Set request status to CANCELLED, record who cancelled and when.
+ getStatus(): RequestStatus //UC11 //action: Get current request status.
+ getRequester(): UserProfile //UC11 //action: Get the user who made the request.
+ getScheduledTime(): TimeRange //UC11 //action: Get the scheduled time for the request.
}
class CollectionRequest extends ServiceRequest {

vehicleType : VehicleType

location    : Address
}
class TransportRequest extends ServiceRequest {

routePlan : RoutePlan
.. Methods ..
+ planRoute(waypoints: Coordinates[]) //UC9 //action: Define or update the route plan for the transport request.
}

class RoutePlan {

waypoints : Coordinates[]
}
ServiceProvider "1" --> "*" ServiceRequest : handles >

TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {

journeyId       : UUID

trackingCode    : String

stages          : Stage[]

status          : TrackingStatus

currentLocation : Address
.. Methods ..
+ updateStage(stage: Stage) //UC8, UC9 //action: Add a new stage to the journey's progress.
+ updateLocation(location: Address) //UC9 //action: Update the current tracked location of the waste.
+ completeJourney() //UC9 //action: Mark the waste journey as completed.
+ cancelJourney() //UC12 //action: Mark the waste journey as cancelled.
+ getStatus(): TrackingStatus //UC10 //action: Get the current tracking status.
+ getCurrentLocation(): Address //UC10 //action: Get the current tracked location.
+ getStages(): Stage[] //UC10 //action: Get the list of stages completed in the journey.
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {

productId           : UUID

name                : String

description         : String

category            : ProductCategory

inventory           : Integer

listingStatus       : ListingStatus

listedDate          : Date

lastUpdatedDate     : Date

sustainabilityScore : Float
.. Methods ..
+ publishListing() //UC5 //action: Set listing status to PUBLISHED and record listed date.
+ updateDetails(name: String, description: String, category: ProductCategory) //UC13 //action: Update core product details and record update timestamp.
+ updateInventory(inventory: Integer) //UC13 //action: Update product inventory and record update timestamp.
+ updateListingStatus(newStatus: ListingStatus) //UC13 //action: Change the listing status of the product.
}
class SearchFilter {

categories  : ProductCategory[]

location    : Address

maxDistance : Float

keywords    : String
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {

pointId        : UUID

name           : String

type           : PointType

position       : Coordinates

operatingHours : OpeningHours[]
.. Methods ..
+ updateDetails(name: String, type: PointType) //UC20 //action: Update the name and type of the collection point.
+ updateOperatingHours(hours: OpeningHours[]) //UC20 //action: Update the operating hours for the collection point.
+ updatePosition(position: Coordinates) //UC20 //action: Update the geographical position of the collection point.
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {

templateId : String

channel    : NotificationChannel

content    : String
}
class NotificationService {
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml