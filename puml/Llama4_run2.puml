@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {

valid    : Boolean

messages : String[]

+ validate() : ValidationResult // UC1
}

class Coordinates {

latitude  : Float

longitude : Float

+ calculateDistance(Coordinates) : Float // UC22
}

class Address {

street           : String

city             : String

zipCode          : String

country          : String

position         : Coordinates

validationStatus : VerificationStatus

+ validateAddress() : ValidationResult // UC1
+ updateAddress(Address) : void // UC4
}

class TimeRange {

start : LocalTime

end   : LocalTime

+ overlaps(TimeRange) : Boolean // UC8
}

class OpeningHours {

dayOfWeek : DayOfWeek

timeRange : TimeRange

+ isOpen(LocalTime) : Boolean // UC22
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {

id               : UUID

registrationDate : Date

accountStatus    : AccountStatus

+ registerUser(UserProfile, UserCredentials) : void // UC1
+ verifyEmail() : void // UC1
+ login() : void // UC2
+ deactivateAccount() : void // UC15
+ logout() : void // UC16
}

class UserProfile {

name                  : String

email                 : String

phoneNumber           : String

address               : Address

role                  : UserRole

lastUpdatedDate       : Date

accountLockedDate     : Date

emailVerifiedDate     : Date

emailValidationStatus : VerificationStatus

deactivationReason    : String

+ updateProfile(UserProfile) : void // UC4
+ getProfile() : UserProfile // UC4
}

class UserCredentials {

encryptedPassword   : String

lastPasswordReset   : Date

failedLoginAttempts : Integer

lastLoginDate       : Date

passwordResetToken  : String

tokenExpirationDate : Date

email               : String

+ resetPassword() : void // UC3
+ validateCredentials() : Boolean // UC2
}

class ServiceProvider {

providerId  : UUID

companyName : String

profile     : UserProfile

+ updateProfile(ServiceProvider) : void // UC19
+ getProfile() : ServiceProvider // UC19
+ handleCollectionRequest(CollectionRequest) : void // UC8
+ handleTransportRequest(TransportRequest) : void // UC9
}
class "RoleManager <<service>>" as RoleManager {
+ assignRole(UserAccount, UserRole) : void // UC21
+ validateRoleTransition(UserAccount, UserRole) : Boolean // UC21
}
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {

id                : UUID

requestType       : RequestType

status            : RequestStatus

createdDate       : Date

scheduledTime     : TimeRange

proposedTimeSlots : TimeRange[]

requester         : UserProfile

handledBy         : ServiceProvider

trackedJourney    : WasteJourney

requestedDate     : Date

quantity          : Integer

categories        : ProductCategory[]

cancelledBy       : UserProfile

cancelledDate     : Date

+ schedule() : void // UC6
+ cancel() : void // UC12
+ updateStatus(RequestStatus) : void // UC8, UC9
}

class CollectionRequest extends ServiceRequest {

vehicleType : VehicleType

location    : Address

+ assignVehicle(VehicleType) : void // UC8
}

class TransportRequest extends ServiceRequest {

routePlan : RoutePlan

+ planRoute() : void // UC9
}
ServiceProvider "1" --> "*" ServiceRequest : handles >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {

journeyId       : UUID

trackingCode    : String

stages          : Stage[]

status          : TrackingStatus

currentLocation : Address

+ updateStatus(TrackingStatus) : void // UC10
+ track() : WasteJourney // UC10
}
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {

productId           : UUID

name                : String

description         : String

category            : ProductCategory

inventory           : Integer

listingStatus       : ListingStatus

listedDate          : Date

lastUpdatedDate     : Date

sustainabilityScore : Float

+ listProduct() : void // UC5
+ updateListing() : void // UC13
}

class SearchFilter {

categories  : ProductCategory[]

location    : Address

maxDistance : Float

keywords    : String

+ searchProducts() : List<Product> // UC14
}
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {

pointId        : UUID

name           : String

type           : PointType

position       : Coordinates

operatingHours : OpeningHours[]

+ addLocation() : void // UC20
+ updateLocation() : void // UC20
}
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {

templateId : String

channel    : NotificationChannel

content    : String

+ sendNotification() : void // UC1, UC3, UC8, UC9
}
class NotificationService {
+ sendNotification(NotificationTemplate) : void // UC1, UC3, UC8, UC9
}
}
@enduml