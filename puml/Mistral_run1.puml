@startuml
left to right direction

' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {

valid    : Boolean

messages : String[]
}
class Coordinates {

latitude  : Float

longitude : Float
}
class Address {

street           : String

city             : String

zipCode          : String

country          : String

position         : Coordinates

validationStatus : VerificationStatus
}
class TimeRange {

start : LocalTime

end   : LocalTime
}
class OpeningHours {

dayOfWeek : DayOfWeek

timeRange : TimeRange
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {

id               : UUID

registrationDate : Date

accountStatus    : AccountStatus

+ registerUser(name: String, email: String, password: String, address: Address) : ValidationResult //UC1
+ verifyEmail(token: String) : Boolean //UC1
+ lockAccount() : void //UC2
+ unlockAccount() : void //UC2
+ deactivateAccount(reason: String) : void //UC15
}
class UserProfile {

name                  : String

email                 : String

phoneNumber           : String

address               : Address

role                  : UserRole

lastUpdatedDate       : Date

accountLockedDate     : Date

emailVerifiedDate     : Date

emailValidationStatus : VerificationStatus

deactivationReason    : String

+ updateProfile(name: String, phoneNumber: String, address: Address) : ValidationResult //UC4
+ updateEmail(newEmail: String) : ValidationResult //UC4
}
class UserCredentials {

encryptedPassword   : String

lastPasswordReset   : Date

failedLoginAttempts : Integer

lastLoginDate       : Date

passwordResetToken  : String

tokenExpirationDate : Date

email               : String

+ resetPassword(token: String, newPassword: String) : Boolean //UC3
+ validateCredentials(email: String, password: String) : Boolean //UC2
}
class ServiceProvider {

providerId  : UUID

companyName : String

profile     : UserProfile

+ updateServiceProviderProfile(serviceAreas: String[], vehicleTypes: VehicleType[], availability: TimeRange[]) : ValidationResult //UC19
}
class "RoleManager <<service>>" as RoleManager {

+ assignRole(userId: UUID, role: UserRole) : ValidationResult //UC21
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {

id                : UUID

requestType       : RequestType

status            : RequestStatus

createdDate       : Date

scheduledTime     : TimeRange

proposedTimeSlots : TimeRange[]

requester         : UserProfile

handledBy         : ServiceProvider

trackedJourney    : WasteJourney

requestedDate     : Date

quantity          : Integer

categories        : ProductCategory[]

cancelledBy       : UserProfile

cancelledDate     : Date

+ cancelRequest(cancelledBy: UserProfile) : void //UC12
}
class CollectionRequest extends ServiceRequest {

vehicleType : VehicleType

location    : Address

+ scheduleCollection(proposedTimeSlots: TimeRange[]) : Boolean //UC6
}
class TransportRequest extends ServiceRequest {

routePlan : RoutePlan

+ scheduleTransport(routePlan: RoutePlan) : Boolean //UC6
}

class RoutePlan {

waypoints : Coordinates[]

+ planRoute(waypoints: Coordinates[]) : Boolean //UC6
}
ServiceProvider "1" --> "*" ServiceRequest : handles >

TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {

journeyId       : UUID

trackingCode    : String

stages          : Stage[]

status          : TrackingStatus

currentLocation : Address

+ updateTrackingStatus(status: TrackingStatus) : void //UC10
+ addStage(stage: Stage) : void //UC10
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {

productId           : UUID

name                : String

description         : String

category            : ProductCategory

inventory           : Integer

listingStatus       : ListingStatus

listedDate          : Date

lastUpdatedDate     : Date

sustainabilityScore : Float

+ listProduct(name: String, description: String, category: ProductCategory, inventory: Integer) : ValidationResult //UC5
+ updateProductDetails(name: String, description: String, category: ProductCategory, inventory: Integer) : ValidationResult //UC13
}
class SearchFilter {

categories  : ProductCategory[]

location    : Address

maxDistance : Float

keywords    : String

+ filterProducts(categories: ProductCategory[], location: Address, maxDistance: Float, keywords: String) : Product[] //UC14
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {

pointId        : UUID

name           : String

type           : PointType

position       : Coordinates

operatingHours : OpeningHours[]

+ updateCollectionPoint(name: String, type: PointType, position: Coordinates, operatingHours: OpeningHours[]) : ValidationResult //UC20
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {

templateId : String

channel    : NotificationChannel

content    : String
}
class NotificationService {

+ sendNotification(user: UserProfile, type: NotificationType, channel: NotificationChannel, content: String) : void //UC1, UC2, UC3, UC4, UC5, UC6, UC7, UC8, UC9, UC10, UC11, UC12, UC13, UC14, UC15, UC16, UC17, UC18, UC19, UC20, UC21, UC22
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml
