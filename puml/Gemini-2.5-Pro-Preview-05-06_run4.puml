@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {

valid    : Boolean

messages : String[]
}
class Coordinates {

latitude  : Float

longitude : Float
}
class Address {

street           : String

city             : String

zipCode          : String

country          : String

position         : Coordinates

validationStatus : VerificationStatus
}
class TimeRange {

start : LocalTime

end   : LocalTime
}
class OpeningHours {

dayOfWeek : DayOfWeek

timeRange : TimeRange
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {

id               : UUID

registrationDate : Date

accountStatus    : AccountStatus
--
+isActive(): Boolean //UC2 //action: Check if the account status is ACTIVE.
+lockAccount(lockedDate: Date) //UC2 //action: Set account status to LOCKED and record lock date.
+deactivateAccount(reason: String) //UC15, UC18 //action: Deactivate the user account and record the reason.
}
class UserProfile {

name                  : String

email                 : String

phoneNumber           : String

address               : Address

role                  : UserRole

lastUpdatedDate       : Date

accountLockedDate     : Date

emailVerifiedDate     : Date

emailValidationStatus : VerificationStatus

deactivationReason    : String
--
+verifyEmail() //UC1 //action: Mark email as verified.
+isEmailVerified(): Boolean //UC2 //action: Check if the user's email address has been verified.
-recordLockDate(lockedDate: Date) //UC2 //action: Record the date the account was locked.
+updateProfileDetails(name: String, phoneNumber: String, address: Address) //UC4, UC19 //action: Update user profile details and record timestamp.
-recordDeactivation(reason: String) //UC15 //action: Record the reason for account deactivation.
+changeRole(newRole: UserRole) //UC21 //action: Change the user's role.
}
class UserCredentials {

encryptedPassword   : String

lastPasswordReset   : Date

failedLoginAttempts : Integer

lastLoginDate       : Date

passwordResetToken  : String

tokenExpirationDate : Date

email               : String
--
+matchesPassword(passwordAttempt: String): Boolean //UC2 //action: Verify provided password against stored hash.
+recordSuccessfulLogin() //UC2 //action: Record the timestamp of a successful login and reset failed attempts.
+recordFailedLoginAttempt() //UC2 //action: Increment failed login attempt counter.
+shouldLockAccount(): Boolean //UC2 //action: Check if failed login attempts exceed threshold.
+generatePasswordResetToken(): String //UC3 //action: Generate and store a password reset token with an expiration date.
+isValidPasswordResetToken(token: String): Boolean //UC3 //action: Check if the provided token matches the stored one and has not expired.
+resetPassword(newEncryptedPassword: String) //UC3 //action: Update the encrypted password and clear the reset token.
}
class ServiceProvider {

providerId  : UUID

companyName : String

profile     : UserProfile
--
+updateCompanyName(companyName: String) //UC18, UC19 //action: Update Service Provider company name.
}
class "RoleManager <<service>>" as RoleManager {
--
+assignRole(userAccount: UserAccount, newRole: UserRole) //UC21 //action: Assign a new role to a user, potentially creating associated entities like ServiceProvider.
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {

id                : UUID

requestType       : RequestType

status            : RequestStatus

createdDate       : Date

scheduledTime     : TimeRange

proposedTimeSlots : TimeRange[]

requester         : UserProfile

handledBy         : ServiceProvider

trackedJourney    : WasteJourney

requestedDate     : Date

quantity          : Integer

categories        : ProductCategory[]

cancelledBy       : UserProfile

cancelledDate     : Date
--
+acceptRequest(provider: ServiceProvider) //UC8, UC9 //action: Service provider accepts the pending request. Assigns provider.
+proposeTimes(proposedTimes: TimeRange[]) //UC8 //action: Service provider proposes alternative time slots if the requested one isn't feasible.
+schedule(scheduledTime: TimeRange) //UC6, UC8, UC9 //action: Schedule the service for a specific time and update status.
+completeCollection() //UC8 //action: Mark the collection request as completed.
+completeTransport() //UC9 //action: Mark the transport request as completed.
+linkWasteJourney(journey: WasteJourney) //UC8 //action: Associate a waste journey with this service request.
+cancelByUser(canceller: UserProfile) //UC12 //action: Cancel the service request by the user.
}
class CollectionRequest extends ServiceRequest {

vehicleType : VehicleType

location    : Address
}
class TransportRequest extends ServiceRequest {

routePlan : RoutePlan
--
+planRoute(waypoints: Coordinates[]) //UC9 //action: Define the waypoints for the transport route.
}

class RoutePlan {

waypoints : Coordinates[]
}
ServiceProvider "1" --> "*" ServiceRequest : handles >

TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {

journeyId       : UUID

trackingCode    : String

stages          : Stage[]

status          : TrackingStatus

currentLocation : Address
--
+startJourney(trackingCode: String, initialLocation: Address) //UC8 //action: Start tracking a new waste journey.
+updateJourneyStage(stage: Stage, location: Address) //UC9 //action: Update the current stage and location of the waste journey.
+completeJourney() //UC9 //action: Mark the waste journey as completed.
+cancelJourney() //UC12 //action: Cancel the waste journey.
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {

productId           : UUID

name                : String

description         : String

category            : ProductCategory

inventory           : Integer

listingStatus       : ListingStatus

listedDate          : Date

lastUpdatedDate     : Date

sustainabilityScore : Float
--
+validateDetails(): ValidationResult //UC5 //action: Validate the product's core details before publishing.
+publishListing() //UC5 //action: Set the listing status to PUBLISHED and record listed date.
+updateDetails(name: String, description: String, category: ProductCategory, inventory: Integer) //UC13 //action: Update details of an existing product listing.
}
class SearchFilter {

categories  : ProductCategory[]

location    : Address

maxDistance : Float

keywords    : String
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {

pointId        : UUID

name           : String

type           : PointType

position       : Coordinates

operatingHours : OpeningHours[]
--
+updateDetails(name: String, type: PointType, position: Coordinates, operatingHours: OpeningHours[]) //UC20 //action: Update the details of a collection point.
+addOperatingHours(hours: OpeningHours) //UC20 //action: Add a new operating hours entry.
+removeOperatingHours(hours: OpeningHours) //UC20 //action: Remove an existing operating hours entry.
+setLocationAddress(address: Address) //UC20 //action: Set or update the address where the collection point is located.
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {

templateId : String

channel    : NotificationChannel

content    : String
}
class NotificationService {
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml