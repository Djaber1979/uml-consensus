@startuml
' Core Value Objects Package
class Address {
  - street: String
  - city: String
  - postalCode: String
  - country: String
  - validationStatus: ValidationStatus
  - position: Coordinates
}

class ValidationResult {
  - isValid: Boolean
  - messages: String[]
}

enum VerificationStatus {
  VERIFIED
  UNVERIFIED
}

enum AccountStatus {
  ACTIVE
  DEACTIVATED
  SUSPENDED
  LOCKED
}

' User Management Package
class UserProfile {
  - userId: String
  - name: String
  - email: String
  - phoneNumber: String
  - address: Address
  - role: UserRole
  - deactivationReason: String
  - lastUpdatedDate: Date
  - emailValidationStatus: VerificationStatus
  + {static} validateEmailFormat(email: String): ValidationResult // UC1 // Action: Validate email format
  + isEmailVerified(): boolean // UC2 // Action: Check if email is verified
  + updateName(name: String): void // UC4 // Action: Update name and record timestamp
  + updatePhoneNumber(phoneNumber: String): void // UC4 // Action: Update phone number and record timestamp
  + updateAddress(address: Address): void // UC4 // Action: Update address and record timestamp
  + getServiceRequests(): ServiceRequest[] // UC11 // Action: Get user's service requests
  + getProducts(): Product[] // UC13 // Action: Get user's product listings
  + updateRole(newRole: UserRole): void // UC21 // Action: Update user role
}

class UserCredentials {
  - encryptedPassword: String
  - lastLoginDate: Date
  - failedLoginAttempts: Integer
  - lastPasswordReset: Date
  - passwordResetToken: String
  - tokenExpirationDate: Date
  + {static} validatePasswordStrength(password: String): ValidationResult // UC1 // Action: Validate password strength
  + verifyPassword(password: String): boolean // UC2 // Action: Verify provided password
  + incrementFailedLoginAttempts(): void // UC2 // Action: Increment failed login attempts
  + getFailedLoginAttempts(): int // UC2 // Action: Get number of failed login attempts
  + resetFailedLoginAttempts(): void // UC2 // Action: Reset failed login attempts
  + setLastLoginDate(date: Date): void // UC2 // Action: Set last login date
}

class UserAccount {
  - accountId: String
  - registrationDate: Date
  - accountStatus: AccountStatus
  - userProfile: UserProfile
  - userCredentials: UserCredentials
  - serviceProvider: ServiceProvider
  + {static} createAccount(name: String, email: String, password: String, address: Address): UserAccount // UC1 // Action: Create user account with unverified email status
  + verifyEmail(token: String): void // UC1 // Action: Verify email and activate account
  + {static} findByEmail(email: String): UserAccount // UC2 // Action: Find user account by email
  + isActive(): boolean // UC2 // Action: Check if account is active
  + requestPasswordReset(): void // UC3 // Action: Request password reset
  + resetPassword(token: String, newPassword: String): void // UC3 // Action: Reset password with token
  + deactivateAccount(reason: String): void // UC15 // Action: Deactivate user account
}

' Notification Services Package
class NotificationService {
  - notificationId: String
  + sendVerificationEmail(userProfile: UserProfile): void // UC1 // Action: Send verification email
  + sendRegistrationConfirmation(userProfile: UserProfile): void // UC1 // Action: Send registration confirmation
  + sendPasswordResetEmail(userProfile: UserProfile): void // UC3 // Action: Send password reset email
  + sendPasswordResetConfirmation(userProfile: UserProfile): void // UC3 // Action: Send password reset confirmation
  + sendRequestAcceptedNotification(userProfile: UserProfile, serviceRequest: ServiceRequest): void // UC8 // Action: Send request accepted notification
  + sendAccountDeactivationConfirmation(userProfile: UserProfile): void // UC15 // Action: Send account deactivation confirmation
  + sendProviderStatusChangeNotification(serviceProvider: ServiceProvider): void // UC18 // Action: Send provider status change notification
}

' Product Management Package
class Product {
  - productId: String
  - name: String
  - description: String
  - category: ProductCategory
  - inventory: Integer
  - listingStatus: ListingStatus
  - listedDate: Date
  - lastUpdatedDate: Date
  - requester: UserProfile
  + {static} createProduct(requester: UserProfile, name: String, description: String, category: ProductCategory, inventory: Integer): Product // UC5 // Action: Create and publish product listing
  + updateName(name: String): void // UC13 // Action: Update product name
  + updateDescription(description: String): void // UC13 // Action: Update product description
  + updateInventory(inventory: Integer): void // UC13 // Action: Update product inventory
  + {static} searchProducts(filter: SearchFilter): Product[] // UC14 // Action: Search products with filter
}

class SearchFilter {
  - categories: ProductCategory[]
  - location: Address
  - maxDistance: Integer
  - keywords: String[]
}

enum ListingStatus {
  DRAFT
  PENDING_APPROVAL
  PUBLISHED
  REJECTED
  ARCHIVED
}

' Service Management Package
abstract class ServiceRequest {
  - requestId: String
  - requestType: RequestType
  - status: RequestStatus
  - createdDate: Date
  - scheduledTime: TimeRange
  - proposedTimeSlots: TimeRange[]
  - requester: UserProfile
  - handledBy: ServiceProvider
  - cancelledBy: UserProfile
  - cancelledDate: Date
  + cancelRequest(cancelledBy: UserProfile): void // UC12 // Action: Cancel service request
}

class CollectionRequest extends ServiceRequest {
  - vehicleType: VehicleType
  - location: Address
  - quantity: Integer
  - categories: ProductCategory[]
  + {static} createCollectionRequest(requester: UserProfile, handledBy: ServiceProvider, vehicleType: VehicleType, location: Address, quantity: Integer, categories: ProductCategory[]): CollectionRequest // UC6 // Action: Create collection request
  + acceptRequest(scheduledTime: TimeRange): void // UC8 // Action: Accept collection request with scheduled time
  + completeRequest(): void // UC8 // Action: Complete collection request
}

class TransportRequest extends ServiceRequest {
  - routePlan: RoutePlan
  - quantity: Integer
  - categories: ProductCategory[]
  + {static} createTransportRequest(requester: UserProfile, handledBy: ServiceProvider, routePlan: RoutePlan, quantity: Integer, categories: ProductCategory[]): TransportRequest // UC6 // Action: Create transport request
  + acceptRequest(scheduledTime: TimeRange): void // UC9 // Action: Accept transport request with scheduled time
  + completeRequest(): void // UC9 // Action: Complete transport request
}

class ServiceProvider {
  - providerId: String
  - companyName: String
  - profile: UserProfile
  + {static} getAvailableProviders(type: RequestType, location: Address): ServiceProvider[] // UC7 // Action: Get list of available service providers
  + getPendingCollectionRequests(): CollectionRequest[] // UC8 // Action: Get pending collection requests
  + getPendingTransportRequests(): TransportRequest[] // UC9 // Action: Get pending transport requests
  + deactivate(): void // UC18 // Action: Deactivate service provider
}

' Waste Tracking Package
class WasteJourney {
  - journeyId: String
  - trackingCode: String
  - status: JourneyStatus
  - currentLocation: Address
  + {static} findByTrackingCode(trackingCode: String): WasteJourney // UC10 // Action: Find waste journey by tracking code
}

' Location Management Package
class CollectionPoint {
  - pointId: String
  - name: String
  - type: PointType
  - position: Coordinates
  - operatingHours: OpeningHours[]
  - address: Address
  + {static} createCollectionPoint(name: String, type: PointType, position: Coordinates, operatingHours: OpeningHours[], address: Address): CollectionPoint // UC20 // Action: Create collection point
  + updateName(name: String): void // UC20 // Action: Update collection point name
  + updateOperatingHours(operatingHours: OpeningHours[]): void // UC20 // Action: Update operating hours
  + {static} getAllCollectionPoints(): CollectionPoint[] // UC22 // Action: Get all collection points
}

' Relationships (partial, based on context)
UserAccount "1" *--> "1" UserProfile
UserAccount "1" *--> "1" UserCredentials
UserAccount "1" --> "0..1" ServiceProvider : may act as >
ServiceProvider "1" --> "*" ServiceRequest : handles >
ServiceRequest "1" --> "1" UserProfile : requested by >
Product "1" --> "1" UserProfile : requested by >
NotificationService --> UserProfile
NotificationService --> ServiceProvider
CollectionPoint "1" --> "1" Address : located at >
@enduml