@startuml
package "User Management" {
  class UserProfile {
    - name: String
    - email: String
    - phoneNumber: String
    - address: Address
    - emailValidationStatus: VerificationStatus
    - lastUpdatedDate: Date
    - deactivationReason: String
    - role: UserRole
    + generateVerificationToken(): String //UC1 //Generate verification token for email verification
    + verifyEmail(token: String): Boolean //UC1 //Verify email using token
    + setName(name: String) //UC4 //Update user name with validation
    + setPhoneNumber(phoneNumber: String) //UC4 //Update phone number with validation
    + setAddress(address: Address) //UC4 //Update address with validation
  }

  class UserAccount {
    - id: UUID
    - registrationDate: Date
    - accountStatus: AccountStatus
    + static createNewAccount(name: String, email: String, password: String, address: Address, etc.): UserAccount //UC1 //Create a new user account with unverified status
    + verifyEmail(token: String): Boolean //UC1 //Verify email and activate account
    + attemptLogin(password: String): Boolean //UC2 //Validate credentials and record login
    + deactivateAccount(reason: String) //UC15 //Deactivate user account
    + changeAccountStatus(status: AccountStatus, reason: String) //UC18 //Change account status with reason
  }

  class UserCredentials {
    - email: String
    - encryptedPassword: String
    - passwordResetToken: String
    - tokenExpirationDate: Date
    - lastLoginDate: Date
    + verifyPassword(password: String): Boolean //UC2 //Verify password for login
    + recordLogin() //UC2 //Record login timestamp
    + generatePasswordResetToken(): String //UC3 //Generate password reset token
    + resetPassword(newPassword: String, token: String): Boolean //UC3 //Reset password if token is valid
  }

  class RoleManager <<service>> {
    + assignRole(userAccount: UserAccount, role: UserRole) //UC18, UC21 //Assign a role to a user account
  }
}

package "Service Management" {
  abstract class ServiceRequest {
    - requestId: UUID
    - requester: UserProfile
    - handledBy: ServiceProvider
    - status: RequestStatus
    - createdDate: Date
    - cancelledBy: UserProfile
    - cancelledDate: Date
    + cancelRequest(cancelledBy: UserProfile) //UC12 //Cancel service request and update status
  }

  class CollectionRequest {
    - vehicleType: VehicleType
    - location: Address
    + static createCollectionRequest(requester: UserProfile, vehicleType: VehicleType, location: Address, quantity: Integer, categories: ProductCategory[], etc.): CollectionRequest //UC6 //Create a new collection request
    + acceptRequest(serviceProvider: ServiceProvider, scheduledTime: TimeRange) //UC8 //Accept and schedule collection request
    + completeRequest() //UC8 //Mark collection request as completed
  }

  class TransportRequest {
    - routePlan: RoutePlan
    + static createTransportRequest(requester: UserProfile, routePlan: RoutePlan, quantity: Integer, categories: ProductCategory[], etc.): TransportRequest //UC6 //Create a new transport request
    + acceptRequest(serviceProvider: ServiceProvider, scheduledTime: TimeRange) //UC9 //Accept and schedule transport request
    + completeRequest() //UC9 //Mark transport request as completed
  }
}

package "Product Management" {
  class Product {
    - productId: UUID
    - name: String
    - description: String
    - category: ProductCategory
    - inventory: Integer
    - listingStatus: ListingStatus
    - listedDate: Date
    - lastUpdatedDate: Date
    - requester: UserProfile
    + static createListing(userProfile: UserProfile, name: String, description: String, category: ProductCategory, inventory: Integer, etc.): Product //UC5 //Create and publish a new product listing
    + setName(name: String) //UC13 //Update product name with validation
    + setDescription(description: String) //UC13 //Update product description with validation
    + setCategory(category: ProductCategory) //UC13 //Update product category with validation
    + setInventory(inventory: Integer) //UC13 //Update product inventory with validation
  }
}

package "Location Management" {
  class CollectionPoint {
    - pointId: UUID
    - name: String
    - type: PointType
    - address: Address
    - operatingHours: OpeningHours[]
    + static createCollectionPoint(name: String, type: PointType, address: Address, operatingHours: OpeningHours[]): CollectionPoint //UC20 //Create a new collection point
    + setName(name: String) //UC20 //Update collection point name with validation
    + setType(type: PointType) //UC20 //Update collection point type with validation
    + setAddress(address: Address) //UC20 //Update collection point address with validation
    + setOperatingHours(operatingHours: OpeningHours[]) //UC20 //Update operating hours with validation
  }
}

package "Notification Services" {
  class NotificationService {
    + sendEmailVerification(userProfile: UserProfile, token: String) //UC1 //Send email verification link
    + sendRegistrationConfirmation(userProfile: UserProfile) //UC1 //Send registration confirmation
    + sendPasswordResetEmail(userProfile: UserProfile, token: String) //UC3 //Send password reset email
    + sendPasswordResetConfirmation(userProfile: UserProfile) //UC3 //Send password reset confirmation
    + sendAccountDeactivationConfirmation(userProfile: UserProfile) //UC15 //Send account deactivation confirmation
  }
}
@enduml