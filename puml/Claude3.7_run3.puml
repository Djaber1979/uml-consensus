@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {
valid    : Boolean
messages : String[]
+ createFailure(messages: String[]) : ValidationResult //UC1 //action: create failure result
+ createSuccess() : ValidationResult //UC1 //action: create success result
}
class Coordinates {
latitude  : Float
longitude : Float
+ calculateDistance(other: Coordinates) : Float //UC14 //action: calculate distance between coordinates
}
class Address {
street           : String
city             : String
zipCode          : String
country          : String
position         : Coordinates
validationStatus : VerificationStatus
+ validate() : ValidationResult //UC1 //action: validate address format
+ verifyLocation() : void //UC1 //action: verify address location exists
}
class TimeRange {
start : LocalTime
end   : LocalTime
+ overlaps(other: TimeRange) : Boolean //UC19 //action: check if time ranges overlap
+ isValid() : Boolean //UC20 //action: validate time range
}
class OpeningHours {
dayOfWeek : DayOfWeek
timeRange : TimeRange
+ isValidSchedule() : Boolean //UC20 //action: validate opening hours schedule
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {
id               : UUID
registrationDate : Date
accountStatus    : AccountStatus
+ create(profile: UserProfile, credentials: UserCredentials) : UserAccount //UC1 //action: create new user account
+ activateAccount() : void //UC1 //action: activate user account after email verification
+ deactivateAccount(reason: String) : void //UC15 //action: deactivate user account
+ lockAccount() : void //UC2 //action: lock account after failed login attempts
+ unlockAccount() : void //UC2 //action: unlock previously locked account
}
class UserProfile {
name                  : String
email                 : String
phoneNumber           : String
address               : Address
role                  : UserRole
lastUpdatedDate       : Date
accountLockedDate     : Date
emailVerifiedDate     : Date
emailValidationStatus : VerificationStatus
deactivationReason    : String
+ validateProfileData() : ValidationResult //UC1 //action: validate profile information
+ updateProfile(name: String, phoneNumber: String, address: Address) : void //UC4 //action: update profile information
+ verifyEmail() : void //UC1 //action: mark email as verified
+ isEmailVerified() : Boolean //UC2 //action: check if email is verified
+ recordProfileUpdate() : void //UC4 //action: record profile update timestamp
}
class UserCredentials {
encryptedPassword   : String
lastPasswordReset   : Date
failedLoginAttempts : Integer
lastLoginDate       : Date
passwordResetToken  : String
tokenExpirationDate : Date
email               : String
+ validateCredentials(email: String, password: String) : ValidationResult //UC1 //action: validate credentials format
+ encryptPassword(password: String) : void //UC1 //action: encrypt password for storage
+ verifyPassword(password: String) : Boolean //UC2 //action: verify provided password
+ generatePasswordResetToken() : String //UC3 //action: generate token for password reset
+ isResetTokenValid() : Boolean //UC3 //action: check if reset token is valid
+ resetPassword(newPassword: String) : void //UC3 //action: reset user password
+ incrementFailedLoginAttempts() : void //UC2 //action: increment failed login counter
+ resetFailedLoginAttempts() : void //UC2 //action: reset failed login counter
+ recordLoginTime() : void //UC2 //action: record login timestamp
+ isAccountLocked() : Boolean //UC2 //action: check if account is locked
}
class ServiceProvider {
providerId  : UUID
companyName : String
profile     : UserProfile
+ updateServiceAreas(areas: Address[]) : void //UC19 //action: update service provider coverage areas
+ updateAvailability(hours: OpeningHours[]) : void //UC19 //action: update provider availability schedule
+ updateSupportedVehicles(types: VehicleType[]) : void //UC19 //action: update supported vehicle types
}
class "RoleManager <<service>>" as RoleManager {
+ assignRole(account: UserAccount, role: UserRole) : ValidationResult //UC21 //action: assign role to user account
+ promoteToServiceProvider(account: UserAccount) : ValidationResult //UC21 //action: promote user to service provider
+ validateRoleTransition(currentRole: UserRole, newRole: UserRole) : ValidationResult //UC21 //action: validate if role transition is allowed
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {
id                : UUID
requestType       : RequestType
status            : RequestStatus
createdDate       : Date
scheduledTime     : TimeRange
proposedTimeSlots : TimeRange[]
requester         : UserProfile
handledBy         : ServiceProvider
trackedJourney    : WasteJourney
requestedDate     : Date
quantity          : Integer
categories        : ProductCategory[]
cancelledBy       : UserProfile
cancelledDate     : Date
+ createRequest(requester: UserProfile) : ServiceRequest //UC6 //action: create service request
+ scheduleRequest(timeSlot: TimeRange) : void //UC8 //action: schedule request for time slot
+ assignServiceProvider(provider: ServiceProvider) : void //UC8 //action: assign provider to request
+ cancelRequest(cancelledBy: UserProfile) : void //UC12 //action: cancel service request
+ completeRequest() : void //UC8 //action: mark request as completed
+ validateRequestData() : ValidationResult //UC6 //action: validate request data
+ proposeTimeSlots(slots: TimeRange[]) : void //UC8 //action: propose alternative time slots
}
class CollectionRequest extends ServiceRequest {
vehicleType : VehicleType
location    : Address
+ createCollectionRequest(requester: UserProfile, location: Address) : CollectionRequest //UC6 //action: create collection request
+ setVehicleType(type: VehicleType) : void //UC6 //action: set vehicle type for collection
}
class TransportRequest extends ServiceRequest {
routePlan : RoutePlan
+ createTransportRequest(requester: UserProfile, routePlan: RoutePlan) : TransportRequest //UC6 //action: create transport request
+ updateRoutePlan(plan: RoutePlan) : void //UC9 //action: update transport route plan
}
class ServiceRequestDetails {
payload : Map
}
ServiceRequest ..> ServiceRequestDetails : uses >
class RoutePlan {
waypoints : Coordinates[]
+ addWaypoint(point: Coordinates) : void //UC9 //action: add waypoint to route
+ optimizeRoute() : void //UC9 //action: optimize transport route
+ calculateTotalDistance() : Float //UC9 //action: calculate total route distance
}
ServiceProvider "1" --> "*" ServiceRequest : handles >
TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {
journeyId       : UUID
trackingCode    : String
stages          : Stage[]
status          : TrackingStatus
currentLocation : Address
+ createJourney() : WasteJourney //UC10 //action: create waste journey
+ generateTrackingCode() : String //UC10 //action: generate unique tracking code
+ addStage(stage: Stage) : void //UC10 //action: add stage to waste journey
+ updateCurrentLocation(location: Address) : void //UC10 //action: update current waste location
+ completeJourney() : void //UC10 //action: mark journey as completed
+ cancelJourney() : void //UC10 //action: cancel waste journey
+ validateTrackingCode(code: String) : ValidationResult //UC10 //action: validate tracking code format
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {
productId           : UUID
name                : String
description         : String
category            : ProductCategory
inventory           : Integer
listingStatus       : ListingStatus
listedDate          : Date
lastUpdatedDate     : Date
sustainabilityScore : Float
+ createListing(name: String, description: String, category: ProductCategory) : Product //UC5 //action: create product listing
+ validateProductData() : ValidationResult //UC5 //action: validate product data
+ publishListing() : void //UC5 //action: publish product listing
+ updateListing(name: String, description: String, category: ProductCategory) : void //UC13 //action: update product listing
+ archiveListing() : void //UC13 //action: archive product listing
+ rejectListing(reason: String) : void //UC17 //action: reject product listing
+ calculateSustainabilityScore() : Float //UC5 //action: calculate product sustainability score
+ updateInventory(quantity: Integer) : void //UC13 //action: update product inventory
+ recordListingUpdate() : void //UC13 //action: record listing update timestamp
}
class SearchFilter {
categories  : ProductCategory[]
location    : Address
maxDistance : Float
keywords    : String
+ addCategory(category: ProductCategory) : void //UC14 //action: add category to filter
+ setLocationRadius(location: Address, radius: Float) : void //UC14 //action: set location search radius
+ addKeyword(keyword: String) : void //UC14 //action: add keyword to search
+ validateSearchCriteria() : ValidationResult //UC14 //action: validate search filter criteria
+ matchesProduct(product: Product) : Boolean //UC14 //action: check if product matches filter
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {
pointId        : UUID
name           : String
type           : PointType
position       : Coordinates
operatingHours : OpeningHours[]
+ createPoint(name: String, type: PointType, position: Coordinates) : CollectionPoint //UC20 //action: create collection point
+ updateOperatingHours(hours: OpeningHours[]) : void //UC20 //action: update operating hours
+ validatePointData() : ValidationResult //UC20 //action: validate collection point data
+ isOpenAt(time: LocalTime, day: DayOfWeek) : Boolean //UC22 //action: check if point is open at specific time
+ findNearbyPoints(location: Coordinates, radius: Float) : CollectionPoint[] //UC22 //action: find nearby collection points
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {
templateId : String
channel    : NotificationChannel
content    : String
+ getTemplate(type: NotificationType, channel: NotificationChannel) : NotificationTemplate //UC1 //action: get notification template
+ renderTemplate(params: Map) : String //UC1 //action: render template with parameters
}
class NotificationService {
+ sendVerificationEmail(email: String, token: String) : void //UC1 //action: send verification email
+ sendPasswordResetEmail(email: String, token: String) : void //UC3 //action: send password reset email
+ notifyRequestAccepted(request: ServiceRequest) : void //UC8 //action: notify user of accepted request
+ notifyAccountDeactivation(email: String) : void //UC15 //action: notify user of account deactivation
+ alertServiceProvider(provider: ServiceProvider, request: ServiceRequest) : void //UC8 //action: alert service provider of new request
+ sendRegistrationConfirmation(email: String) : void //UC1 //action: send registration confirmation
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml