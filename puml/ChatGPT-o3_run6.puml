@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {

valid    : Boolean

messages : String[]
}
class Coordinates {

latitude  : Float

longitude : Float
}
class Address {

street           : String

city             : String

zipCode          : String

country          : String

position         : Coordinates

validationStatus : VerificationStatus
}
class TimeRange {

start : LocalTime

end   : LocalTime
}
class OpeningHours {

dayOfWeek : DayOfWeek

timeRange : TimeRange
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {

id               : UUID

registrationDate : Date

accountStatus    : AccountStatus
  
  + activateAccount(): void // UC1 // action: activate account
  + deactivate(reason: String): void // UC15 // action: soft-deactivate account
  + registerUnverified(profile: UserProfile, credentials: UserCredentials): UserAccount // UC1 // action: create unverified account
}
class UserProfile {

name                  : String

email                 : String

phoneNumber           : String

address               : Address

role                  : UserRole

lastUpdatedDate       : Date

accountLockedDate     : Date

emailVerifiedDate     : Date

emailValidationStatus : VerificationStatus

deactivationReason    : String
  
  + applyProfileChanges(details: Map): void // UC4 // action: apply profile changes
  + validateEmailFormat(): ValidationResult // UC1 // action: validate email format
  + validateProfileData(): ValidationResult // UC4 // action: validate profile update
  + verifyEmail(): void // UC1 // action: mark email as verified
}
class UserCredentials {

encryptedPassword   : String

lastPasswordReset   : Date

failedLoginAttempts : Integer

lastLoginDate       : Date

passwordResetToken  : String

tokenExpirationDate : Date

email               : String
  
  + generatePasswordResetToken(expiry: Date): String // UC3 // action: generate reset token
  + recordLogin(loginTime: Date): void // UC2 // action: record login time
  + resetPassword(newPassword: String): void // UC3 // action: reset password
  + validatePasswordStrength(): ValidationResult // UC1 // action: validate password strength
  + verifyPassword(inputPassword: String): Boolean // UC2 // action: verify password
}
class ServiceProvider {

providerId  : UUID

companyName : String

profile     : UserProfile
  
  + checkAvailability(request: ServiceRequest): Boolean // UC8 // action: verify capacity/vehicle
  + dispatchVehicle(request: CollectionRequest): void // UC8 // action: dispatch for collection
  + executeTransport(request: TransportRequest): void // UC9 // action: perform transport
  + updateProfile(details: Map): void // UC19 // action: update provider profile
}
class "RoleManager <<service>>" as RoleManager {
  
  + assignRole(target: UserProfile, newRole: UserRole): void // UC21 // action: assign role
  + validateRoleChange(target: UserProfile, newRole: UserRole): ValidationResult // UC21 // action: validate role change
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {

id                : UUID

requestType       : RequestType

status            : RequestStatus

createdDate       : Date

scheduledTime     : TimeRange

proposedTimeSlots : TimeRange[]

requester         : UserProfile

handledBy         : ServiceProvider

trackedJourney    : WasteJourney

requestedDate     : Date

quantity          : Integer

categories        : ProductCategory[]

cancelledBy       : UserProfile

cancelledDate     : Date
  
  + accept(provider: ServiceProvider, time: TimeRange): void // UC8 // action: accept request
  + assignToProvider(provider: ServiceProvider): void // UC6 // action: assign provider
  + cancel(requester: UserProfile): void // UC12 // action: cancel request
  + getStatus(): RequestStatus // UC11 // action: get current status
  + markCollected(): void // UC8 // action: mark collected
  + markCompleted(): void // UC9 // action: mark completed
  + schedule(time: TimeRange): void // UC6 // action: schedule request
  + submit(requester: UserProfile): void // UC6 // action: submit service request
}
class CollectionRequest extends ServiceRequest {

vehicleType : VehicleType

location    : Address
}
class TransportRequest extends ServiceRequest {

routePlan : RoutePlan
  
  + planRoute(routePlan: RoutePlan): void // UC9 // action: set route plan
}

class RoutePlan {

waypoints : Coordinates[]
}
ServiceProvider "1" --> "*" ServiceRequest : handles >

TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {

journeyId       : UUID

trackingCode    : String

stages          : Stage[]

status          : TrackingStatus

currentLocation : Address
  
  + getCurrentStatus(): TrackingStatus // UC10 // action: retrieve journey status
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {

productId           : UUID

name                : String

description         : String

category            : ProductCategory

inventory           : Integer

listingStatus       : ListingStatus

listedDate          : Date

lastUpdatedDate     : Date

sustainabilityScore : Float
  
  + publishListing(): void // UC5 // action: publish listing
  + updateListing(details: Map): void // UC13 // action: update listing
  + validateListing(): ValidationResult // UC5 // action: validate listing
  + validateUpdate(): ValidationResult // UC13 // action: validate updated listing
}
class SearchFilter {

categories  : ProductCategory[]

location    : Address

maxDistance : Float

keywords    : String
  
  + filter(products: Product[]): Product[] // UC14 // action: filter products
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {

pointId        : UUID

name           : String

type           : PointType

position       : Coordinates

operatingHours : OpeningHours[]
  
  + saveChanges(): void // UC20 // action: persist location changes
  + validateLocation(): ValidationResult // UC20 // action: validate location data
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {

templateId : String

channel    : NotificationChannel

content    : String
}
class NotificationService {
  
  + sendAccountDeactivation(user: UserProfile): void // UC15 // action: notify account deactivation
  + sendCancellationConfirmation(user: UserProfile, request: ServiceRequest): void // UC12 // action: confirm cancellation
  + sendPasswordReset(user: UserProfile, token: String): void // UC3 // action: send reset link
  + sendPasswordResetConfirm(user: UserProfile): void // UC3 // action: confirm password reset
  + sendRegistrationConfirmation(user: UserProfile): void // UC1 // action: send registration success
  + sendRequestAccepted(user: UserProfile, request: ServiceRequest): void // UC8 // action: notify request accepted
  + sendVerificationEmail(user: UserProfile): void // UC1 // action: send email verification
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml
