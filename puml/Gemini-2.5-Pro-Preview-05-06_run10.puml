@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {

valid    : Boolean

messages : String[]
}
class Coordinates {

latitude  : Float

longitude : Float
}
class Address {

street           : String

city             : String

zipCode          : String

country          : String

position         : Coordinates

validationStatus : VerificationStatus
}
class TimeRange {

start : LocalTime

end   : LocalTime
}
class OpeningHours {

dayOfWeek : DayOfWeek

timeRange : TimeRange
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {

id               : UUID

registrationDate : Date

accountStatus    : AccountStatus
--
+ canLogin(): Boolean //UC2 //action: Check if account status allows login (ACTIVE)
+ lockAccount() //UC2 //action: Lock the account due to failed logins (sets status to LOCKED)
+ deactivateAccount() //UC15, UC18 //action: Set the account status to DEACTIVATED
+ activateAccount() //UC18 //action: Activate the user account (sets status to ACTIVE)
+ suspendAccount() //UC18 //action: Suspend the user account (sets status to SUSPENDED)
+ assignServiceProviderRole(providerId: UUID, companyName: String): ServiceProvider //UC21 //action: Link UserAccount to a new ServiceProvider profile and return it
}
class UserProfile {

name                  : String

email                 : String

phoneNumber           : String

address               : Address

role                  : UserRole

lastUpdatedDate       : Date

accountLockedDate     : Date

emailVerifiedDate     : Date

emailValidationStatus : VerificationStatus

deactivationReason    : String
--
+ verifyEmail() //UC1 //action: Mark the email as verified (sets status to VERIFIED) and record date
+ isEmailVerified(): Boolean //UC2 //action: Check if user email is verified
+ getRole(): UserRole //UC2 //action: Get user role for access control
+ updateProfileDetails(name: String, phoneNumber: String, address: Address): ValidationResult //UC4, UC19 //action: Validate and update user profile details and record timestamp
+ recordAccountLockDate() //UC2 //action: Record account lock date
+ recordDeactivationReason(reason: String) //UC15 //action: Record the reason for account deactivation
}
class UserCredentials {

encryptedPassword   : String

lastPasswordReset   : Date

failedLoginAttempts : Integer

lastLoginDate       : Date

passwordResetToken  : String

tokenExpirationDate : Date

email               : String
--
+ checkPassword(plainPassword: String): Boolean //UC2 //action: Validate provided password against stored hash
+ recordSuccessfulLogin() //UC2 //action: Record successful login timestamp and reset failed attempts
+ recordFailedLoginAttempt() //UC2 //action: Increment failed login attempts
+ generatePasswordResetToken(): String //UC3 //action: Generate a password reset token, set expiration, and return token
+ isPasswordResetTokenValid(token: String): Boolean //UC3 //action: Verify if the provided password reset token is valid and not expired
+ resetPassword(newEncryptedPassword: String) //UC3 //action: Update the user's password using the new encrypted value and clear the reset token details
}
class ServiceProvider {

providerId  : UUID

companyName : String

profile     : UserProfile
--
+ updateCompanyName(newName: String): ValidationResult //UC19 //action: Validate and update the service provider's company name
}
class "RoleManager <<service>>" as RoleManager {
--
+ changeUserRole(userProfile: UserProfile, newRole: UserRole): ValidationResult //UC21 //action: Validate and change the user's role
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {

id                : UUID

requestType       : RequestType

status            : RequestStatus

createdDate       : Date

scheduledTime     : TimeRange

proposedTimeSlots : TimeRange[]

requester         : UserProfile

handledBy         : ServiceProvider

trackedJourney    : WasteJourney

requestedDate     : Date

quantity          : Integer

categories        : ProductCategory[]

cancelledBy       : UserProfile

cancelledDate     : Date
--
+ assignProvider(provider: ServiceProvider) //UC8, UC9 //action: Assign a service provider to handle the request
+ schedule(scheduledTime: TimeRange) //UC8, UC9 //action: Schedule the request for a specific time and update status to SCHEDULED
+ completeRequest() //UC8, UC9 //action: Mark the service request as COMPLETED
+ cancelRequest(canceller: UserProfile) //UC12 //action: Cancel the service request (sets status to CANCELLED) and record who cancelled it and when
+ getStatus(): RequestStatus //UC11 //action: Get the current status of the service request
}
class CollectionRequest extends ServiceRequest {

vehicleType : VehicleType

location    : Address
}
class TransportRequest extends ServiceRequest {

routePlan : RoutePlan
--
+ updateRoutePlan(routePlan: RoutePlan) //UC9 //action: Update the route plan for the transport request
}

class RoutePlan {

waypoints : Coordinates[]
}
ServiceProvider "1" --> "*" ServiceRequest : handles >

TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {

journeyId       : UUID

trackingCode    : String

stages          : Stage[]

status          : TrackingStatus

currentLocation : Address
--
+ markAsCollected(location: Address) //UC8 //action: Update waste journey stage to COLLECTED, set current location, set status to IN_PROGRESS
+ markAsInTransit(currentLocation: Address) //UC9 //action: Update waste journey stage to IN_TRANSIT and update current location
+ markAsProcessed(location: Address) //UC9 //action: Update waste journey stage to PROCESSED and update location
+ markAsRecycled(location: Address) //UC9 //action: Update waste journey stage to RECYCLED and update location
+ completeJourney() //UC9 //action: Mark the waste journey as COMPLETED
+ cancelJourney() //UC12 //action: Cancel the waste journey tracking (sets status to CANCELLED)
+ getCurrentStatus(): TrackingStatus //UC10 //action: Get the current tracking status
+ getCurrentLocation(): Address //UC10 //action: Get the current location of the waste
+ getStages(): Stage[] //UC10 //action: Get the list of completed stages
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {

productId           : UUID

name                : String

description         : String

category            : ProductCategory

inventory           : Integer

listingStatus       : ListingStatus

listedDate          : Date

lastUpdatedDate     : Date

sustainabilityScore : Float
--
+ publishListing() //UC5 //action: Change product listing status to PUBLISHED (from DRAFT or PENDING_APPROVAL)
+ updateDetails(name: String, description: String, category: ProductCategory, inventory: Integer): ValidationResult //UC13 //action: Validate and update product details, record timestamp
}
class SearchFilter {

categories  : ProductCategory[]

location    : Address

maxDistance : Float

keywords    : String
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {

pointId        : UUID

name           : String

type           : PointType

position       : Coordinates

operatingHours : OpeningHours[]
--
+ updateDetails(name: String, type: PointType, position: Coordinates, operatingHours: OpeningHours[], address: Address): ValidationResult //UC20 //action: Validate and update collection point details
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {

templateId : String

channel    : NotificationChannel

content    : String
}
class NotificationService {
--
+ sendVerificationEmail(userProfile: UserProfile) //UC1 //action: Send email verification notification
+ sendRegistrationSuccessNotification(userProfile: UserProfile) //UC1 //action: Send registration confirmation notification
+ sendPasswordResetEmail(userProfile: UserProfile, token: String) //UC3 //action: Send password reset email with token
+ sendPasswordResetConfirmation(userProfile: UserProfile) //UC3 //action: Send confirmation that password was reset
+ sendRequestAcceptedNotification(request: ServiceRequest) //UC8, UC9 //action: Notify user that the request has been accepted and scheduled
+ sendAccountDeactivationNotification(userProfile: UserProfile) //UC15 //action: Notify user about account deactivation
+ sendProviderStatusChangeNotification(provider: ServiceProvider, newStatus: AccountStatus) //UC18 //action: Notify service provider about changes in their account status
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml