@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {
valid    : Boolean
messages : String[]
}
class Coordinates {
latitude  : Float
longitude : Float
}
class Address {
street           : String
city             : String
zipCode          : String
country          : String
position         : Coordinates
validationStatus : VerificationStatus
}
class TimeRange {
start : LocalTime
end   : LocalTime
}
class OpeningHours {
dayOfWeek : DayOfWeek
timeRange : TimeRange
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {
id               : UUID
registrationDate : Date
accountStatus    : AccountStatus

+ validateCredentials(email: String, password: String) : ValidationResult //UC2
+ createAccount(email: String, password: String) : UserAccount //UC1
+ deactivateAccount() : void //UC15
+ sendPasswordResetLink() : void //UC3
+ terminateSession() : void //UC16
}
class UserProfile {
name                  : String
email                 : String
phoneNumber           : String
address               : Address
role                  : UserRole
lastUpdatedDate       : Date
accountLockedDate     : Date
emailVerifiedDate     : Date
emailValidationStatus : VerificationStatus
deactivationReason    : String

+ verifyEmail(token: String) : void //UC1
+ updateProfileDetails(name: String, phone: String, address: Address) : void //UC4
+ recordLastUpdatedDate() : void //UC4
}
class UserCredentials {
encryptedPassword   : String
lastPasswordReset   : Date
failedLoginAttempts : Integer
tokenExpirationDate : Date
passwordResetToken  : String
email               : String

+ resetPassword(newPassword: String) : void //UC3
+ validateResetToken(token: String) : Boolean //UC3
}
class ServiceProvider {
providerId  : UUID
companyName : String
profile     : UserProfile

+ checkAvailability(date: Date) : Boolean //UC8
+ acceptRequest(request: ServiceRequest) : void //UC8
+ dispatchTeam(request: ServiceRequest) : void //UC8
+ checkVehicleAvailability(vehicleType: VehicleType) : Boolean //UC9
}
class "RoleManager <<service>>" as RoleManager {
+ assignRole(user: UserAccount, role: UserRole) : void //UC21
+ validateRoleTransition(current: UserRole, target: UserRole) : ValidationResult //UC21
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {
id                : UUID
requestType       : RequestType
status            : RequestStatus
createdDate       : Date
scheduledTime     : TimeRange
requester         : UserProfile
handledBy         : ServiceProvider
trackedJourney    : WasteJourney

+ cancelRequest(user: UserProfile) : void //UC12
+ checkCancellationEligibility() : Boolean //UC12
+ scheduleRequest(time: TimeRange) : void //UC6
}
class CollectionRequest extends ServiceRequest {
vehicleType : VehicleType
location    : Address
}
class TransportRequest extends ServiceRequest {
routePlan : RoutePlan
}
class ServiceRequestDetails {
payload : Map
}
ServiceRequest ..> ServiceRequestDetails : uses >
class RoutePlan {
waypoints : Coordinates[]
}
ServiceProvider "1" --> "*" ServiceRequest : handles >
TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {
journeyId       : UUID
trackingCode    : String
stages          : Stage[]
status          : TrackingStatus
currentLocation : Address

+ updateTrackingStatus(status: TrackingStatus) : void //UC10
+ addStage(stage: Stage) : void //UC10
+ markAsCollected() : void //UC8
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {
productId           : UUID
name                : String
description         : String
category            : ProductCategory
inventory           : Integer
listingStatus       : ListingStatus

+ createProductListing(category: ProductCategory, inventory: Integer) : Product //UC5
+ validateProductDetails() : ValidationResult //UC5
+ publishListing() : void //UC5
+ editListing(details: Map) : void //UC13
}
class SearchFilter {
categories  : ProductCategory[]
location    : Address
maxDistance : Float

+ applyFilters(criteria: Map) : List<Product> //UC14
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {
pointId        : UUID
name           : String
type           : PointType
position       : Coordinates
operatingHours : OpeningHours[]

+ validateAddress() : ValidationResult //UC20
+ validateOperatingHours() : ValidationResult //UC20
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
REQUEST_ACCEPTED
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {
templateId : String
channel    : NotificationChannel
content    : String
}
class NotificationService {
+ sendVerificationEmail(user: UserProfile) : void //UC1
+ sendDeactivationConfirmation(user: UserProfile) : void //UC15
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml