@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {
valid    : Boolean
messages : String[]
+ createValidResult() : ValidationResult //UC1,UC2,UC3,UC4,UC5 //action: create a valid result
+ createInvalidResult(messages : String[]) : ValidationResult //UC1,UC2,UC3,UC4,UC5 //action: create an invalid result
}
class Coordinates {
latitude  : Float
longitude : Float
+ validateCoordinates() : ValidationResult //UC20 //action: validate coordinate values
}
class Address {
street           : String
city             : String
zipCode          : String
country          : String
position         : Coordinates
validationStatus : VerificationStatus
+ validateAddress() : ValidationResult //UC1,UC4,UC19,UC20 //action: validate address format and consistency
+ verifyAddress() : void //UC1 //action: mark address as verified
}
class TimeRange {
start : LocalTime
end   : LocalTime
+ validateTimeRange() : ValidationResult //UC20 //action: validate time range consistency
+ overlapsWith(other : TimeRange) : Boolean //UC19,UC20 //action: check if time ranges overlap
}
class OpeningHours {
dayOfWeek : DayOfWeek
timeRange : TimeRange
+ validateOpeningHours() : ValidationResult //UC20 //action: validate opening hours consistency
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {
id               : UUID
registrationDate : Date
accountStatus    : AccountStatus
+ createAccount(profile : UserProfile, credentials : UserCredentials) : UserAccount //UC1 //action: create a new user account
+ activateAccount() : void //UC1 //action: activate the account after email verification
+ deactivateAccount(reason : String) : void //UC15 //action: deactivate user account
+ lockAccount() : void //UC2 //action: lock account after multiple failed login attempts
+ validateUserAccount() : ValidationResult //UC1 //action: validate account information
}
class UserProfile {
name                  : String
email                 : String
phoneNumber           : String
address               : Address
role                  : UserRole
lastUpdatedDate       : Date
accountLockedDate     : Date
emailVerifiedDate     : Date
emailValidationStatus : VerificationStatus
deactivationReason    : String
+ validateProfile() : ValidationResult //UC1,UC4,UC19 //action: validate profile information
+ updateProfile(name : String, phoneNumber : String, address : Address) : void //UC4,UC19 //action: update profile information
+ verifyEmail() : void //UC1 //action: mark email as verified
+ isEmailVerified() : Boolean //UC1,UC2 //action: check if email is verified
}
class UserCredentials {
encryptedPassword   : String
lastPasswordReset   : Date
failedLoginAttempts : Integer
lastLoginDate       : Date
passwordResetToken  : String
tokenExpirationDate : Date
email               : String
+ validateCredentials(plainPassword : String) : ValidationResult //UC1 //action: validate password format and requirements
+ authenticate(email : String, password : String) : Boolean //UC2 //action: authenticate user with credentials
+ incrementFailedLoginAttempts() : Integer //UC2 //action: increment failed login counter
+ resetFailedLoginAttempts() : void //UC2 //action: reset failed login counter after successful login
+ generatePasswordResetToken() : String //UC3 //action: generate password reset token
+ isPasswordResetTokenValid() : Boolean //UC3 //action: check if reset token is still valid
+ resetPassword(newPassword : String) : void //UC3 //action: update password with new value
+ updateLastLoginDate() : void //UC2 //action: update last login timestamp
}
class ServiceProvider {
providerId  : UUID
companyName : String
profile     : UserProfile
+ validateServiceProvider() : ValidationResult //UC19 //action: validate service provider information
+ updateServiceProviderDetails(companyName : String) : void //UC19 //action: update service provider company details
}
class "RoleManager <<service>>" as RoleManager {
+ assignRole(userAccount : UserAccount, role : UserRole) : ValidationResult //UC21 //action: assign new role to user account
+ canTransitionToRole(currentRole : UserRole, newRole : UserRole) : Boolean //UC21 //action: validate role transition
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {
id                : UUID
requestType       : RequestType
status            : RequestStatus
createdDate       : Date
scheduledTime     : TimeRange
proposedTimeSlots : TimeRange[]
requester         : UserProfile
handledBy         : ServiceProvider
trackedJourney    : WasteJourney
requestedDate     : Date
quantity          : Integer
categories        : ProductCategory[]
cancelledBy       : UserProfile
cancelledDate     : Date
+ validateRequest() : ValidationResult //UC6,UC7 //action: validate service request details
+ cancelRequest(cancelledBy : UserProfile) : void //UC12 //action: cancel service request
+ acceptRequest(provider : ServiceProvider) : void //UC8,UC9 //action: accept service request
+ completeRequest() : void //UC8,UC9 //action: mark request as completed
+ scheduleRequest(timeSlot : TimeRange) : void //UC8,UC9 //action: schedule service request for specific time
+ isPastCancellationWindow() : Boolean //UC12 //action: check if cancellation is still allowed
}
class CollectionRequest extends ServiceRequest {
vehicleType : VehicleType
location    : Address
+ validateCollectionRequest() : ValidationResult //UC6 //action: validate collection-specific request details
}
class TransportRequest extends ServiceRequest {
routePlan : RoutePlan
+ validateTransportRequest() : ValidationResult //UC6,UC7 //action: validate transport-specific request details
}
class ServiceRequestDetails {
payload : Map
+ updateDetails(key : String, value : Object) : void //UC6,UC7 //action: update service request details
}
ServiceRequest ..> ServiceRequestDetails : uses >
class RoutePlan {
waypoints : Coordinates[]
+ validateRoutePlan() : ValidationResult //UC9 //action: validate route plan feasibility
+ optimizeRoute() : void //UC9 //action: optimize the transportation route
}
ServiceProvider "1" --> "*" ServiceRequest : handles >
TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {
journeyId       : UUID
trackingCode    : String
stages          : Stage[]
status          : TrackingStatus
currentLocation : Address
+ validateJourney() : ValidationResult //UC10 //action: validate waste journey details
+ generateTrackingCode() : String //UC10 //action: generate unique tracking code
+ addStage(stage : Stage) : void //UC10 //action: add new stage to journey
+ updateLocation(location : Address) : void //UC10 //action: update waste current location
+ getJourneyByTrackingCode(code : String) : WasteJourney //UC10 //action: retrieve journey using tracking code
+ completeJourney() : void //UC10 //action: mark journey as completed
+ cancelJourney() : void //UC10 //action: mark journey as cancelled
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {
productId           : UUID
name                : String
description         : String
category            : ProductCategory
inventory           : Integer
listingStatus       : ListingStatus
listedDate          : Date
lastUpdatedDate     : Date
sustainabilityScore : Float
+ validateProduct() : ValidationResult //UC5,UC13 //action: validate product details
+ createListing(name : String, description : String, category : ProductCategory, inventory : Integer) : Product //UC5 //action: create new product listing
+ updateListing(name : String, description : String, category : ProductCategory, inventory : Integer) : void //UC13 //action: update product listing details
+ publishListing() : void //UC5 //action: change listing status to published
+ archiveListing() : void //UC13 //action: change listing status to archived
+ calculateSustainabilityScore() : Float //UC5 //action: calculate product sustainability score
}
class SearchFilter {
categories  : ProductCategory[]
location    : Address
maxDistance : Float
keywords    : String
+ validateFilter() : ValidationResult //UC14 //action: validate search filter parameters
+ applyFilter(products : Product[]) : Product[] //UC14 //action: apply filter to product list
+ filterByKeywords(keywords : String) : void //UC14 //action: filter by keywords
+ filterByCategories(categories : ProductCategory[]) : void //UC14 //action: filter by categories
+ filterByLocation(location : Address, maxDistance : Float) : void //UC14 //action: filter by location proximity
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {
pointId        : UUID
name           : String
type           : PointType
position       : Coordinates
operatingHours : OpeningHours[]
+ validateCollectionPoint() : ValidationResult //UC20,UC22 //action: validate collection point details
+ createCollectionPoint(name : String, type : PointType, position : Coordinates, address : Address) : CollectionPoint //UC20 //action: create new collection point
+ updateCollectionPoint(name : String, type : PointType) : void //UC20 //action: update collection point details
+ addOperatingHours(operatingHours : OpeningHours) : void //UC20 //action: add operating hours to collection point
+ removeOperatingHours(operatingHours : OpeningHours) : void //UC20 //action: remove operating hours from collection point
+ isOpenAt(dayOfWeek : DayOfWeek, time : LocalTime) : Boolean //UC22 //action: check if collection point is open at specific time
+ findNearbyPoints(location : Coordinates, radius : Float) : CollectionPoint[] //UC22 //action: find collection points near location
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {
templateId : String
channel    : NotificationChannel
content    : String
+ getTemplate(type : NotificationType, channel : NotificationChannel) : NotificationTemplate //UC1,UC3,UC8,UC9,UC15 //action: retrieve notification template
}
class NotificationService {
+ sendNotification(recipient : UserProfile, type : NotificationType, channel : NotificationChannel) : void //UC1,UC3,UC8,UC9,UC15 //action: send notification to user
+ sendVerificationEmail(recipient : UserProfile) : void //UC1 //action: send email verification link
+ sendPasswordResetEmail(recipient : UserProfile) : void //UC3 //action: send password reset link
+ sendRequestStatusUpdate(recipient : UserProfile, request : ServiceRequest) : void //UC8,UC9 //action: notify about request status change
+ sendAccountDeactivationConfirmation(recipient : UserProfile) : void //UC15 //action: confirm account deactivation
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml