@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {
+valid    : Boolean
+messages : String[]
}
class Coordinates {
+latitude  : Float
+longitude : Float
}
class Address {
+street           : String
+city             : String
+zipCode          : String
+country          : String
+position         : Coordinates
+validationStatus : VerificationStatus
}
class TimeRange {
+start : LocalTime
+end   : LocalTime
}
class OpeningHours {
+dayOfWeek : DayOfWeek
+timeRange : TimeRange
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {
+id               : UUID
+registrationDate : Date
+accountStatus    : AccountStatus

' UC1
+validateEmailFormat(email: String): ValidationResult //UC1 //action: Validate email format during registration
+validatePasswordStrength(password: String): ValidationResult //UC1 //action: Validate password strength during registration
+createUnverifiedAccount(email: String): UserAccount //UC1 //action: Create unverified account
+deactivateAccount(reason: String): void //UC15 //action: Deactivate user account

' UC2
+validateCredentials(credentials: UserCredentials): ValidationResult //UC2 //action: Validate user credentials
+updateLastLogin(): void //UC2 //action: Update login timestamp

' UC15
+setAccountStatus(status: AccountStatus): void //UC15 //action: Update account status field
}
class UserProfile {
+name                  : String
+email                 : String
+phoneNumber           : String
+address               : Address
+role                  : UserRole
+lastUpdatedDate       : Date
+accountLockedDate     : Date
+emailVerifiedDate     : String
+emailValidationStatus : VerificationStatus
+deactivationReason    : String

' UC1
+sendVerificationEmail(): void //UC1 //action: Send email verification link
+verifyEmail(token: String): void //UC1 //action: Mark email as verified

' UC4
+validateProfileUpdates(name: String, phone: String): ValidationResult //UC4 //action: Validate profile changes
+updateProfileDetails(name: String, phone: String): void //UC4 //action: Apply profile updates
}
class UserCredentials {
+encryptedPassword   : String
+lastPasswordReset   : Date
+failedLoginAttempts : Integer
+lastLoginDate       : Date
+passwordResetToken  : String
+tokenExpirationDate : Date
+email               : String

' UC2
+incrementFailedAttempts(): void //UC2 //action: Track failed login attempts
+lockAccount(): void //UC2 //action: Temporarily lock account after failed attempts

' UC3
+generatePasswordResetToken(): String //UC3 //action: Generate password reset token
+validateTokenExpiration(token: String): Boolean //UC3 //action: Check reset token validity
+updatePassword(newHash: String): void //UC3 //action: Update password hash
}
class ServiceProvider {
+providerId  : UUID
+companyName : String
+profile     : UserProfile

' UC19
+validateProfileUpdates(companyName: String): ValidationResult //UC19 //action: Validate provider profile changes
+updateProfileDetails(companyName: String): void //UC19 //action: Apply provider profile updates
}
class "RoleManager <<service>>" as RoleManager {
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {
+id                : UUID
+requestType       : RequestType
+status            : RequestStatus
+scheduledTime     : TimeRange
+proposedTimeSlots : TimeRange[]
+requester         : UserProfile
+handledBy         : ServiceProvider
+trackedJourney    : WasteJourney
+requestedDate     : Date
+quantity          : Integer
+categories        : ProductCategory[]
+cancelledBy       : UserProfile
+cancelledDate     : Date

' UC6
+submitRequest(): void //UC6 //action: Submit service request
+validateRequestDetails(): ValidationResult //UC6 //action: Validate request form

' UC12
+cancelRequest(cancelledBy: UserProfile): void //UC12 //action: Cancel active request

' UC11
+viewStatus(): RequestStatus //UC11 //action: Retrieve current request status
}
class CollectionRequest extends ServiceRequest {
+vehicleType : VehicleType
+location    : Address

' UC8
+checkAvailability(date: Date): Boolean //UC8 //action: Check provider capacity
+acceptRequest(provider: ServiceProvider): void //UC8 //action: Accept collection request
+markAsCollected(): void //UC8 //action: Update collection status
}
class TransportRequest extends ServiceRequest {
+routePlan : RoutePlan

' UC9
+checkVehicleAvailability(vehicleType: VehicleType): Boolean //UC9 //action: Check transport logistics
+scheduleTransport(route: RoutePlan): void //UC9 //action: Schedule transport request
+markAsCompleted(): void //UC9 //action: Complete transport request
}
class ServiceRequestDetails {
+payload : Map
}
ServiceRequest ..> ServiceRequestDetails : uses >
class RoutePlan {
+waypoints : Coordinates[]
}
ServiceProvider "1" --> "*" ServiceRequest : handles >

TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {
+journeyId       : UUID
+trackingCode    : String
+stages          : Stage[]
+status          : TrackingStatus
+currentLocation : Address

' UC10
+updateStatus(newStatus: TrackingStatus): void //UC10 //action: Update journey tracking status
+addStage(stage: Stage): void //UC10 //action: Add new tracking stage
+getCurrentLocation(): Coordinates //UC10 //action: Retrieve current waste location
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {
+productId           : UUID
+name                : String
+description         : String
+category            : ProductCategory
+inventory           : Integer
+listingStatus       : ListingStatus
+listedDate          : Date
+lastUpdatedDate     : Date
+sustainabilityScore : Float

' UC5
+validateProductDetails(): ValidationResult //UC5 //action: Validate product listing data
+publishListing(): void //UC5 //action: Publish product listing

' UC13
+updateListingDetails(name: String, description: String): void //UC13 //action: Update product listing
}
class SearchFilter {
+categories  : ProductCategory[]
+location    : Address
+maxDistance : Float
+keywords    : String

' UC14
+applyFilters(products: List<Product>): List<Product> //UC14 //action: Apply search filters to listings
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {
+pointId        : UUID
+name           : String
+type           : PointType
+position       : Coordinates
+operatingHours : OpeningHours[]

' UC20
+validateOperatingHours(): ValidationResult //UC20 //action: Validate operating hours consistency
+updateLocationDetails(name: String, address: Address): void //UC20 //action: Update collection point details
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {
+templateId : String
+channel    : NotificationChannel
+content    : String
}
class NotificationService {
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml