@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {

valid    : Boolean

messages : String[]
}
class Coordinates {

latitude  : Float

longitude : Float
}
class Address {

street           : String

city             : String

zipCode          : String

country          : String

position         : Coordinates

validationStatus : VerificationStatus

+ validate() : ValidationResult // UC20 // action: Validate address consistency
}
class TimeRange {

start : LocalTime

end   : LocalTime

+ validate() : ValidationResult // UC20 // action: Validate time range consistency
}
class OpeningHours {

dayOfWeek : DayOfWeek

timeRange : TimeRange

+ validate() : ValidationResult // UC20 // action: Validate opening hours
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {

id               : UUID

registrationDate : Date

accountStatus    : AccountStatus

+ create() : ValidationResult // UC1 // action: Create unverified account
+ deactivate(reason: String) : void // UC15 // action: Deactivate account
+ lock() : void // UC2 // action: Lock account after failed attempts
}
class UserProfile {

name                  : String

email                 : String

phoneNumber           : String

address               : Address

role                  : UserRole

lastUpdatedDate       : Date

accountLockedDate     : Date

emailVerifiedDate     : Date

emailValidationStatus : VerificationStatus

deactivationReason    : String

+ markEmailVerified() : void // UC1 // action: Set email as verified
+ updateDetails() : ValidationResult // UC4 // action: Validate and update profile
+ recordDeactivationReason(reason: String) : void // UC15 // action: Store deactivation reason
}
class UserCredentials {

encryptedPassword   : String

lastPasswordReset   : Date

failedLoginAttempts : Integer

lastLoginDate       : Date

passwordResetToken  : String

tokenExpirationDate : Date

email               : String

+ validatePasswordStrength(password: String) : ValidationResult // UC1 // action: Validate password strength
+ validateCredentials(password: String) : ValidationResult // UC2 // action: Authenticate user
+ generateResetToken() : void // UC3 // action: Generate password reset token
+ updatePassword(newPassword: String) : void // UC3 // action: Update encrypted password
+ recordLogin() : void // UC2 // action: Record successful login
}
class ServiceProvider {

providerId  : UUID

companyName : String

profile     : UserProfile

+ updateCompanyName(name: String) : void // UC19 // action: Update provider company name
}
class "RoleManager <<service>>" as RoleManager {
+ assignRole(profile: UserProfile, role: UserRole) : ValidationResult // UC21 // action: Validate and update user role
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {

id                : UUID

requestType       : RequestType

status            : RequestStatus

createdDate       : Date

scheduledTime     : TimeRange

proposedTimeSlots : TimeRange[]

requester         : UserProfile

handledBy         : ServiceProvider

trackedJourney    : WasteJourney

requestedDate     : Date

quantity          : Integer

categories        : ProductCategory[]

cancelledBy       : UserProfile

cancelledDate     : Date

+ schedule(time: TimeRange) : void // UC8 UC9 // action: Schedule request timeframe
+ complete() : void // UC8 UC9 // action: Mark request as completed
+ cancel(cancelledBy: UserProfile) : void // UC12 // action: Cancel request and update status
}
class CollectionRequest extends ServiceRequest {

vehicleType : VehicleType

location    : Address

+ validateVehicleType() : ValidationResult // UC8 // action: Check vehicle compatibility
}
class TransportRequest extends ServiceRequest {

routePlan : RoutePlan

+ validateRoute() : ValidationResult // UC9 // action: Verify route feasibility
}
class ServiceRequestDetails {

payload : Map
}
ServiceRequest ..> ServiceRequestDetails : uses >
class RoutePlan {

waypoints : Coordinates[]

+ optimize() : void // UC9 // action: Calculate optimal route
}
ServiceProvider "1" --> "*" ServiceRequest : handles >

TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {

journeyId       : UUID

trackingCode    : String

stages          : Stage[]

status          : TrackingStatus

currentLocation : Address

+ updateStatus(newStatus: TrackingStatus) : void // UC10 // action: Transition tracking status
+ addStage(stage: Stage) : void // UC10 // action: Record processing stage
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {

productId           : UUID

name                : String

description         : String

category            : ProductCategory

inventory           : Integer

listingStatus       : ListingStatus

listedDate          : Date

lastUpdatedDate     : Date

sustainabilityScore : Float

+ publishListing() : ValidationResult // UC5 // action: Validate and publish product
+ updateDetails() : ValidationResult // UC13 // action: Modify product information
}
class SearchFilter {

categories  : ProductCategory[]

location    : Address

maxDistance : Float

keywords    : String

+ validateCriteria() : ValidationResult // UC14 // action: Check filter validity
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {

pointId        : UUID

name           : String

type           : PointType

position       : Coordinates

operatingHours : OpeningHours[]

+ updateOperatingHours(hours: OpeningHours[]) : ValidationResult // UC20 // action: Modify facility schedule
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {

templateId : String

channel    : NotificationChannel

content    : String
}
class NotificationService {
+ sendVerificationEmail(profile: UserProfile) : void // UC1 // action: Send email verification link
+ sendPasswordResetLink(creds: UserCredentials) : void // UC3 // action: Deliver password reset instructions
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml