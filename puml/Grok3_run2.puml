@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
    enum VerificationStatus {
        VERIFIED
        UNVERIFIED
    }
    enum VehicleType {
        TRUCK
        VAN
        CARGO_BIKE
        BICYCLE
        MOTORCYCLE
        COMPACTOR
        ELECTRIC_VAN
        CARGO_VAN
    }
    enum DayOfWeek {
        MON
        TUE
        WED
        THU
        FRI
        SAT
        SUN
    }
    class ValidationResult {
        valid    : Boolean
        messages : String[]
    }
    class Coordinates {
        latitude  : Float
        longitude : Float
    }
    class Address {
        street           : String
        city             : String
        zipCode          : String
        country          : String
        position         : Coordinates
        validationStatus : VerificationStatus
    }
    class TimeRange {
        start : LocalTime
        end   : LocalTime
    }
    class OpeningHours {
        dayOfWeek : DayOfWeek
        timeRange : TimeRange
    }
    Address *-- Coordinates
    OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
    enum UserRole {
        USER
        SERVICE_PROVIDER
        PLATFORM_MANAGER
    }
    enum AccountStatus {
        ACTIVE
        DEACTIVATED
        SUSPENDED
        LOCKED
    }
    class UserAccount {
        id               : UUID
        registrationDate : Date
        accountStatus    : AccountStatus
        + createAccount(profileData: Map, credentialsData: Map) // UC1 // action: create user account
        + activateAccount() // UC1 // action: activate account after email verification
        + deactivateAccount(reason: String) // UC15 // action: deactivate account
    }
    class UserProfile {
        name                  : String
        email                 : String
        phoneNumber           : String
        address               : Address
        role                  : UserRole
        lastUpdatedDate       : Date
        accountLockedDate     : Date
        emailVerifiedDate     : Date
        emailValidationStatus : VerificationStatus
        deactivationReason    : String
        + verifyEmail() // UC1 // action: verify email
        + updateProfile(newData: Map) // UC4 // action: update profile
        + getServiceRequests() : ServiceRequest[] // UC11 // action: retrieve service requests
        + getProductListings() : Product[] // UC13 // action: retrieve product listings
    }
    class UserCredentials {
        encryptedPassword   : String
        lastPasswordReset   : Date
        failedLoginAttempts : Integer
        lastLoginDate       : Date
        passwordResetToken  : String
        tokenExpirationDate : Date
        email               : String
        + validateEmailAndPassword(email: String, password: String) // UC1 // action: validate email and password
        + validateCredentials(email: String, password: String) // UC2 // action: validate login credentials
        + updateLastLoginDate() // UC2 // action: record login timestamp
        + generateResetToken() // UC3 // action: generate password reset token
        + validateResetToken(token: String) // UC3 // action: validate password reset token
        + updatePassword(newPassword: String) // UC3 // action: update password
    }
    class ServiceProvider {
        providerId  : UUID
        companyName : String
        profile     : UserProfile
    }
    class "RoleManager <<service>>" as RoleManager {
        + assignRole(user: UserProfile, role: UserRole) // UC21 // action: assign role to user
        + removeRole(user: UserProfile, role: UserRole) // UC21 // action: remove role from user
    }
    UserAccount ..> ValidationResult
    UserProfile ..> ValidationResult
    UserCredentials ..> ValidationResult
    RoleManager ..> ValidationResult
    UserAccount "1" --> "1" UserProfile : has >
    UserAccount "1" --> "1" UserCredentials : authenticates >
    UserAccount --> RoleManager : uses >
    UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
    enum RequestType {
        COLLECTION
        TRANSPORT
    }
    enum RequestStatus {
        PENDING
        SCHEDULED
        COMPLETED
        CANCELLED
    }
    abstract class ServiceRequest {
        id                : UUID
        requestType       : RequestType
        status            : RequestStatus
        createdDate       : Date
        scheduledTime     : TimeRange
        proposedTimeSlots : TimeRange[]
        requester         : UserProfile
        handledBy         : ServiceProvider
        trackedJourney    : WasteJourney
        requestedDate     : Date
        quantity          : Integer
        categories        : ProductCategory[]
        cancelledBy       : UserProfile
        cancelledDate     : Date
        + {abstract} createRequest(user: UserProfile, details: Map) // UC6 // action: create a new service request
        + cancelRequest(user: UserProfile) // UC12 // action: cancel the service request
    }
    class CollectionRequest extends ServiceRequest {
        vehicleType : VehicleType
        location    : Address
        + createRequest(user: UserProfile, details: Map) // UC6 // action: create a collection request
        + acceptRequest(provider: ServiceProvider) // UC8 // action: accept the collection request
        + completeRequest() // UC8 // action: complete the collection request
    }
    class TransportRequest extends ServiceRequest {
        routePlan : RoutePlan
        + createRequest(user: UserProfile, details: Map) // UC6 // action: create a transport request
        + acceptRequest(provider: ServiceProvider) // UC9 // action: accept the transport request
        + completeRequest() // UC9 // action: complete the transport request
    }
    class RoutePlan {
        waypoints : Coordinates[]
    }
    ServiceProvider "1" --> "*" ServiceRequest : handles >
    TransportRequest -- RoutePlan
    ServiceRequest --> WasteJourney : tracked by >
    ServiceRequest --> UserProfile : requester >
    ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
    enum TrackingStatus {
        IN_PROGRESS
        COMPLETED
        CANCELLED
    }
    enum Stage {
        COLLECTED
        IN_TRANSIT
        PROCESSED
        RECYCLED
    }
    class WasteJourney {
        journeyId       : UUID
        trackingCode    : String
        stages          : Stage[]
        status          : TrackingStatus
        currentLocation : Address
        + {static} findByTrackingCode(code: String) : WasteJourney // UC10 // action: find journey by tracking code
    }
    WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
    enum ProductCategory {
        RECYCLABLE_PLASTIC
        ELECTRONIC_WASTE
        ORGANIC_MATERIAL
        METAL
        GLASS
        TEXTILES
        PAPER
    }
    enum ListingStatus {
        DRAFT
        PENDING_APPROVAL
        PUBLISHED
        REJECTED
        ARCHIVED
    }
    class Product {
        productId           : UUID
        name                : String
        description         : String
        category            : ProductCategory
        inventory           : Integer
        listingStatus       : ListingStatus
        listedDate          : Date
        lastUpdatedDate     : Date
        sustainabilityScore : Float
        + listProduct(user: UserProfile, details: Map) // UC5 // action: list a new product
        + updateDetails(newDetails: Map) // UC13 // action: update product details
    }
    class SearchFilter {
        categories  : ProductCategory[]
        location    : Address
        maxDistance : Float
        keywords    : String
        + applyFilter() : Product[] // UC14 // action: apply search filter
    }
    Product ..> ValidationResult
    SearchFilter ..> ValidationResult
    Product "1" --> "*" CollectionPoint : available at >
    Product "1" --> "1" UserProfile      : requester >
    SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
    enum PointType {
        COLLECTION_CENTER
        RECYCLING_PLANT
        REUSE_STORE
    }
    class CollectionPoint {
        pointId        : UUID
        name           : String
        type           : PointType
        position       : Coordinates
        operatingHours : OpeningHours[]
        + updateDetails(newDetails: Map) // UC20 // action: update collection point details
        + deactivate() // UC20 // action: deactivate collection point
        + {static} getAllPoints() : CollectionPoint[] // UC22 // action: retrieve all collection points
    }
    CollectionPoint ..> ValidationResult
    CollectionPoint *-- Coordinates
    CollectionPoint *-- OpeningHours
    CollectionPoint -- Address : located at >
    ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
    enum NotificationType {
        REGISTRATION_SUCCESS
        NEW_REQUEST
        DISPATCH_ALERT
        PASSWORD_RESET
        PASSWORD_RESET_CONFIRM
        REQUEST_ACCEPTED
        ACCOUNT_DEACTIVATION
    }
    enum NotificationChannel{
        EMAIL
        SMS
        PUSH
    }
    class NotificationTemplate {
        templateId : String
        channel    : NotificationChannel
        content    : String
    }
    class NotificationService {
        + sendVerificationEmail(user: UserProfile) // UC1 // action: send verification email
        + sendRegistrationConfirmation(user: UserProfile) // UC1 // action: send registration confirmation
        + sendPasswordResetLink(user: UserProfile, token: String) // UC3 // action: send password reset link
        + sendPasswordResetConfirmation(user: UserProfile) // UC3 // action: send password reset confirmation
        + sendDeactivationConfirmation(user: UserProfile) // UC15 // action: send deactivation confirmation
        + notifyUserRequestAccepted(request: ServiceRequest) // UC8 // action: notify user of request acceptance
    }
    NotificationService ..> NotificationTemplate
    NotificationService --> UserProfile     : notifies >
    NotificationService --> ServiceProvider : alerts >
}
@enduml