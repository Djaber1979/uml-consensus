@startuml
left to right direction
' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {

valid    : Boolean

messages : String[]
}
class Coordinates {

latitude  : Float

longitude : Float
}
class Address {

street           : String

city             : String

zipCode          : String

country          : String

position         : Coordinates

validationStatus : VerificationStatus

+ validateAddressConsistency() : ValidationResult // UC4 action: validate address fields
}
class TimeRange {

start : LocalTime

end   : LocalTime
}
class OpeningHours {

dayOfWeek : DayOfWeek

timeRange : TimeRange

+ validateTimeRange() : ValidationResult // UC20 action: validate operating hours
}
Address *-- Coordinates
OpeningHours -- TimeRange
}
' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {

id               : UUID

registrationDate : Date

accountStatus    : AccountStatus

+ createNewAccount() // UC1 action: initialize account with default status
+ activate() // UC1 action: activate account after verification
+ deactivate(reason: String) // UC15 action: mark account as deactivated
+ lock() // UC2 action: lock account after failed attempts
+ unlock() // UC2 action: reset lock status
}
class UserProfile {

name                  : String

email                 : String

phoneNumber           : String

address               : Address

role                  : UserRole

lastUpdatedDate       : Date

accountLockedDate     : Date

emailVerifiedDate     : Date

emailValidationStatus : VerificationStatus

deactivationReason    : String

+ validateEmailFormat() : ValidationResult // UC1 action: check email syntax
+ markEmailAsVerified() // UC1 action: update verification status
+ updateContactDetails() : ValidationResult // UC4 action: validate & save profile changes
+ recordLockDate() // UC2 action: set account locked timestamp
}
class UserCredentials {

encryptedPassword   : String

lastPasswordReset   : Date

failedLoginAttempts : Integer

lastLoginDate       : Date

passwordResetToken  : String

tokenExpirationDate : Date

email               : String

+ validatePasswordStrength() : ValidationResult // UC1 action: check password complexity
+ validateCredentials(input: String) : Boolean // UC2 action: authenticate user
+ recordSuccessfulLogin() // UC2 action: update login timestamp
+ incrementFailedAttempts() // UC2 action: track failed logins
+ generateResetToken() // UC3 action: create password reset token
+ invalidateResetToken() // UC3 action: clear reset credentials
+ updatePassword(newPassword: String) // UC3 action: change encrypted password
}
class ServiceProvider {

providerId  : UUID

companyName : String

profile     : UserProfile

+ updateServiceDetails() : ValidationResult // UC19 action: modify provider information
}
class "RoleManager <<service>>" as RoleManager {
+ changeUserRole() : ValidationResult // UC21 action: modify user permissions
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}
' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {

id                : UUID

requestType       : RequestType

status            : RequestStatus

createdDate       : Date

scheduledTime     : TimeRange

proposedTimeSlots : TimeRange[]

requester         : UserProfile

handledBy         : ServiceProvider

trackedJourney    : WasteJourney

requestedDate     : Date

quantity          : Integer

categories        : ProductCategory[]

cancelledBy       : UserProfile

cancelledDate     : Date

+ submitRequest() : ValidationResult // UC6 action: create new service request
+ cancelRequest() // UC12 action: mark request as cancelled
+ confirmScheduling() // UC8 action: finalize request timing
+ updateStatus(newStatus: RequestStatus) // UC11 action: change request state
}
class CollectionRequest extends ServiceRequest {

vehicleType : VehicleType

location    : Address

+ validateVehicleCapacity() : ValidationResult // UC8 action: check vehicle suitability
}
class TransportRequest extends ServiceRequest {

routePlan : RoutePlan

+ optimizeRoute() // UC9 action: calculate efficient path
}
class ServiceRequestDetails {

payload : Map
}
ServiceRequest ..> ServiceRequestDetails : uses >
class RoutePlan {

waypoints : Coordinates[]

+ validateWaypoints() : ValidationResult // UC9 action: check route feasibility
}
ServiceProvider "1" --> "*" ServiceRequest : handles >

TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}
' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {

journeyId       : UUID

trackingCode    : String

stages          : Stage[]

status          : TrackingStatus

currentLocation : Address

+ updateLocation(newPosition: Address) // UC10 action: track movement
+ addProcessingStage(stage: Stage) // UC10 action: record waste handling phase
}
WasteJourney ..> ValidationResult
}
' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {

productId           : UUID

name                : String

description         : String

category            : ProductCategory

inventory           : Integer

listingStatus       : ListingStatus

listedDate          : Date

lastUpdatedDate     : Date

sustainabilityScore : Float

+ publishListing() : ValidationResult // UC5 action: make product visible
+ updateListingDetails() : ValidationResult // UC13 action: modify product information
+ archiveListing() // UC13 action: remove from active listings
}
class SearchFilter {

categories  : ProductCategory[]

location    : Address

maxDistance : Float

keywords    : String

+ applyFilters() : Product[] // UC14 action: retrieve matching products
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}
' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {

pointId        : UUID

name           : String

type           : PointType

position       : Coordinates

operatingHours : OpeningHours[]

+ validateFacilityDetails() : ValidationResult // UC20 action: check location data integrity
+ updateOperatingHours() // UC20 action: modify available times
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}
' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {

templateId : String

channel    : NotificationChannel

content    : String
}
class NotificationService {
+ sendAccountConfirmation() // UC1 action: trigger verification email
+ dispatchPasswordReset() // UC3 action: send reset instructions
+ notifyStatusChange() // UC12 action: inform about cancellation
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml