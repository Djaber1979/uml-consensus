@startuml
left to right direction

' ──────────────────────────────────────────────
'  CORE VALUE OBJECTS
' ──────────────────────────────────────────────
package "Core Value Objects" {
enum VerificationStatus {
VERIFIED
UNVERIFIED
}
enum VehicleType {
TRUCK
VAN
CARGO_BIKE
BICYCLE
MOTORCYCLE
COMPACTOR
ELECTRIC_VAN
CARGO_VAN
}
enum DayOfWeek {
MON
TUE
WED
THU
FRI
SAT
SUN
}
class ValidationResult {
+valid    : Boolean
+messages : String[]
}
class Coordinates {
+latitude  : Float
+longitude : Float
}
class Address {
+street           : String
+city             : String
+zipCode          : String
+country          : String
+position         : Coordinates
+validationStatus : VerificationStatus
}
class TimeRange {
+start : LocalTime
+end   : LocalTime
}
class OpeningHours {
+dayOfWeek : DayOfWeek
+timeRange : TimeRange
}
Address *-- Coordinates
OpeningHours -- TimeRange
}

' ──────────────────────────────────────────────
'  USER MANAGEMENT
' ──────────────────────────────────────────────
package "User Management" {
enum UserRole {
USER
SERVICE_PROVIDER
PLATFORM_MANAGER
}
enum AccountStatus {
ACTIVE
DEACTIVATED
SUSPENDED
LOCKED
}
class UserAccount {
+id               : UUID
+registrationDate : Date
+accountStatus    : AccountStatus

' //UC1
+validateRegistration(email: String, password: String) : ValidationResult //Uc_id: UC1
+createUnverifiedAccount(email: String) : UserAccount //Uc_id: UC1

' //UC2
+validateCredentials(password: String) : ValidationResult //Uc_id: UC2
+updateLoginTimestamp() : Void //Uc_id: UC2
+lockAccount() : Void //Uc_id: UC2

' //UC15
+deactivateAccount(reason: String) : Void //Uc_id: UC15

' //UC16
+terminateSession() : Void //Uc_id: UC16
}
class UserProfile {
+name                  : String
+email                 : String
+phoneNumber           : String
+address               : Address
+role                  : UserRole
+lastUpdatedDate       : Date
+accountLockedDate     : Date
+emailVerifiedDate     : Date
+emailValidationStatus : VerificationStatus
+deactivationReason    : String

' //UC1
+markEmailAsVerified() : Void //Uc_id: UC1

' //UC4
+validateProfileUpdate(name: String, phoneNumber: String) : ValidationResult //Uc_id: UC4
+updateProfileDetails(name: String, phoneNumber: String, address: Address) : Void //Uc_id: UC4
}
class UserCredentials {
+encryptedPassword   : String
+lastPasswordReset   : Date
+failedLoginAttempts : Integer
+lastLoginDate       : Date
+passwordResetToken  : String
+tokenExpirationDate : Date
+email               : String

' //UC3
+generatePasswordResetToken() : String //Uc_id: UC3
+updatePassword(newPassword: String) : Void //Uc_id: UC3
}
class ServiceProvider {
+providerId  : UUID
+companyName : String
+profile     : UserProfile

' //UC19
+updateProfileDetails(serviceAreas: Coordinates[], vehicleTypes: VehicleType[], schedule: TimeRange[]) : Void //Uc_id: UC19
}
class "RoleManager <<service>>" as RoleManager {
' //UC21
+assignRole(user: UserAccount, newRole: UserRole) : ValidationResult //Uc_id: UC21
}
UserAccount ..> ValidationResult
UserProfile ..> ValidationResult
UserCredentials ..> ValidationResult
RoleManager ..> ValidationResult
UserAccount "1" --> "1" UserProfile : has >
UserAccount "1" --> "1" UserCredentials : authenticates >
UserAccount --> RoleManager : uses >
UserAccount "1" -- "0..1" ServiceProvider : may act as >
}

' ──────────────────────────────────────────────
'  SERVICE MANAGEMENT
' ──────────────────────────────────────────────
package "Service Management" {
enum RequestType {
COLLECTION
TRANSPORT
}
enum RequestStatus {
PENDING
SCHEDULED
COMPLETED
CANCELLED
}
abstract class ServiceRequest {
+id                : UUID
+requestType       : RequestType
+status            : RequestStatus
+createdDate       : Date
+scheduledTime     : TimeRange
+proposedTimeSlots : TimeRange[]
+requester         : UserProfile
+handledBy         : ServiceProvider
+trackedJourney    : WasteJourney
+requestedDate     : Date
+quantity          : Integer
+categories        : ProductCategory[]
+cancelledBy       : UserProfile
+cancelledDate     : Date

' //UC6
+createRequest(requestType: RequestType, requester: UserProfile, quantity: Integer, categories: ProductCategory[]) : ServiceRequest //Uc_id: UC6

' //UC11
+getServiceRequestStatus() : RequestStatus //Uc_id: UC11

' //UC12
+cancelRequest(user: UserProfile) : Void //Uc_id: UC12

' //UC17
+updateServiceListing(status: ListingStatus) : Void //Uc_id: UC17
}
class CollectionRequest extends ServiceRequest {
+vehicleType : VehicleType
+location    : Address

' //UC8
+acceptRequest(timeSlot: TimeRange) : Void //Uc_id: UC8
+markAsCollected() : Void //Uc_id: UC8
}
class TransportRequest extends ServiceRequest {
+routePlan : RoutePlan

' //UC9
+confirmAcceptance(route: RoutePlan) : Void //Uc_id: UC9
+markAsCompleted() : Void //Uc_id: UC9
}
class ServiceRequestDetails {
+payload : Map
}
ServiceRequest ..> ServiceRequestDetails : uses >
class RoutePlan {
+waypoints : Coordinates[]
}
ServiceProvider "1" --> "*" ServiceRequest : handles >
TransportRequest -- RoutePlan
ServiceRequest --> WasteJourney : tracked by >
ServiceRequest --> UserProfile : requester >
ServiceRequest --> ServiceProvider : handled by >
}

' ──────────────────────────────────────────────
'  WASTE TRACKING
' ──────────────────────────────────────────────
package "Waste Tracking" {
enum TrackingStatus {
IN_PROGRESS
COMPLETED
CANCELLED
}
enum Stage {
COLLECTED
IN_TRANSIT
PROCESSED
RECYCLED
}
class WasteJourney {
+journeyId       : UUID
+trackingCode    : String
+stages          : Stage[]
+status          : TrackingStatus
+currentLocation : Address

' //UC10
+getTrackingStatus(trackingCode: String) : WasteJourney //Uc_id: UC10
}
WasteJourney ..> ValidationResult
}

' ──────────────────────────────────────────────
'  PRODUCT MANAGEMENT
' ──────────────────────────────────────────────
package "Product Management" {
enum ProductCategory {
RECYCLABLE_PLASTIC
ELECTRONIC_WASTE
ORGANIC_MATERIAL
METAL
GLASS
TEXTILES
PAPER
}
enum ListingStatus {
DRAFT
PENDING_APPROVAL
PUBLISHED
REJECTED
ARCHIVED
}
class Product {
+productId           : UUID
+name                : String
+description         : String
+category            : ProductCategory
+inventory           : Integer
+listingStatus       : ListingStatus
+listedDate          : Date
+lastUpdatedDate     : Date
+sustainabilityScore : Float

' //UC5
+validateProductDetails() : ValidationResult //Uc_id: UC5
+publish() : Void //Uc_id: UC5

' //UC13
+updateProductDetails(name: String, description: String, inventory: Integer) : Void //Uc_id: UC13
+validateProductUpdates() : ValidationResult //Uc_id: UC13
}
class SearchFilter {
+categories  : ProductCategory[]
+location    : Address
+maxDistance : Float
+keywords    : String

' //UC14
+applyFilters() : Product[] //Uc_id: UC14
}
Product ..> ValidationResult
SearchFilter ..> ValidationResult
Product "1" --> "*" CollectionPoint : available at >
Product "1" --> "1" UserProfile      : requester >
SearchFilter --> "*" Product            : filters >
}

' ──────────────────────────────────────────────
'  LOCATION MANAGEMENT
' ──────────────────────────────────────────────
package "Location Management" {
enum PointType {
COLLECTION_CENTER
RECYCLING_PLANT
REUSE_STORE
}
class CollectionPoint {
+pointId        : UUID
+name           : String
+type           : PointType
+position       : Coordinates
+operatingHours : OpeningHours[]

' //UC20
+validateLocation(address: Address) : ValidationResult //Uc_id: UC20
+saveLocation(address: Address) : Void //Uc_id: UC20

' //UC22
+getAvailablePoints(location: Address) : CollectionPoint[] //Uc_id: UC22
}
CollectionPoint ..> ValidationResult
CollectionPoint *-- Coordinates
CollectionPoint *-- OpeningHours
CollectionPoint -- Address : located at >
ServiceProvider "1" --> "*" CollectionPoint : operates at >
}

' ──────────────────────────────────────────────
'  NOTIFICATION SERVICES
' ──────────────────────────────────────────────
package "Notification Services" {
enum NotificationType {
REGISTRATION_SUCCESS
NEW_REQUEST
DISPATCH_ALERT
PASSWORD_RESET
PASSWORD_RESET_CONFIRM
REQUEST_ACCEPTED
ACCOUNT_DEACTIVATION
}
enum NotificationChannel{
EMAIL
SMS
PUSH
}
class NotificationTemplate {
+templateId : String
+channel    : NotificationChannel
+content    : String
}
class NotificationService {
' //UC1
+sendVerificationEmail(user: UserProfile) : Void //Uc_id: UC1

' //UC3
+sendPasswordResetLink(email: String, token: String) : Void //Uc_id: UC3
}
NotificationService ..> NotificationTemplate
NotificationService --> UserProfile     : notifies >
NotificationService --> ServiceProvider : alerts >
}
@enduml