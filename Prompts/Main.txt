Objective
Analyze the UML class diagram (that will be provided in the next prompt) and main scenarios to refine/add domain-layer methods. Decompose each scenario into atomic business logic actions (state rules, entity interactions), ensuring strict adherence to SRP, and excluding UI/infrastructure concerns.

**Guidelines**  
1. **Method Design**  
   - Create only methods addressing uncovered actions  
   - Assign methods exclusively to classes owning the corresponding responsibility (SRP enforcement)
   - Modify existing methods *only* if responsibilities exactly match  

2. **Action Mapping**  
   - 1 method = 1 atomic business action (split at "And" clauses)  
   - Allow technical sub-actions *only* when serving a single business purpose  

3. **State Management**  
   - Implement explicit state transitions (e.g., `confirmOrder()`)  
   - Embed state rules directly in methods; prohibit generic setters  

4. **Naming & Structure**  
   - Apply domain verbs reflecting class responsibilities (e.g., `calculateTotal()`, never presentation terms)  
   - Respect the UML naming conventions and use the appropriate visibility modifiers (`-`, `+`, `#`, `~`)  
   - Maintain original UML notation/style/structure  

**Constraints**  
- Await class diagram & UC specifications before analysis, do not proceed with the analysis based on assumptions.
- Process *only* primary scenarios  
- Preserve original class diagram structure (relationships/classes/attributes/enums/enum elements)
- Update PlantUML iteratively ( only add/modify methods + //Uc_id + //action: description)  
- Never move responsibilities between classes
- Final output: Full PlantUML code including (original structure + added/modified methods)

**Validation**  
- Strict 1:1 action-method mapping
- All classes/methods comply with SRP  
- Zero UI/infrastructure terminology  
- Explicit state transition enforcement  
- Signature/naming consistency  


(No explanations or commentary)